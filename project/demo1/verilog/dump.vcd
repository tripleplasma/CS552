$date
	Sun Oct 20 13:59:18 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end

$scope module DUT $end
$var wire 1 { clk $end
$var wire 1 | err $end
$var wire 1 } rst $end

$scope module c0 $end
$var reg 1 ~ clk $end
$var reg 1 !! rst $end
$var wire 1 | err $end
$var integer 32 "! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #! err $end
$var wire 1 $! instruction [15] $end
$var wire 1 %! instruction [14] $end
$var wire 1 &! instruction [13] $end
$var wire 1 '! instruction [12] $end
$var wire 1 (! instruction [11] $end
$var wire 1 )! instruction [10] $end
$var wire 1 *! instruction [9] $end
$var wire 1 +! instruction [8] $end
$var wire 1 ,! instruction [7] $end
$var wire 1 -! instruction [6] $end
$var wire 1 .! instruction [5] $end
$var wire 1 /! instruction [4] $end
$var wire 1 0! instruction [3] $end
$var wire 1 1! instruction [2] $end
$var wire 1 2! instruction [1] $end
$var wire 1 3! instruction [0] $end
$var wire 1 4! writeRegSel [2] $end
$var wire 1 5! writeRegSel [1] $end
$var wire 1 6! writeRegSel [0] $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 G! read1Data [15] $end
$var wire 1 H! read1Data [14] $end
$var wire 1 I! read1Data [13] $end
$var wire 1 J! read1Data [12] $end
$var wire 1 K! read1Data [11] $end
$var wire 1 L! read1Data [10] $end
$var wire 1 M! read1Data [9] $end
$var wire 1 N! read1Data [8] $end
$var wire 1 O! read1Data [7] $end
$var wire 1 P! read1Data [6] $end
$var wire 1 Q! read1Data [5] $end
$var wire 1 R! read1Data [4] $end
$var wire 1 S! read1Data [3] $end
$var wire 1 T! read1Data [2] $end
$var wire 1 U! read1Data [1] $end
$var wire 1 V! read1Data [0] $end
$var wire 1 W! read2Data [15] $end
$var wire 1 X! read2Data [14] $end
$var wire 1 Y! read2Data [13] $end
$var wire 1 Z! read2Data [12] $end
$var wire 1 [! read2Data [11] $end
$var wire 1 \! read2Data [10] $end
$var wire 1 ]! read2Data [9] $end
$var wire 1 ^! read2Data [8] $end
$var wire 1 _! read2Data [7] $end
$var wire 1 `! read2Data [6] $end
$var wire 1 a! read2Data [5] $end
$var wire 1 b! read2Data [4] $end
$var wire 1 c! read2Data [3] $end
$var wire 1 d! read2Data [2] $end
$var wire 1 e! read2Data [1] $end
$var wire 1 f! read2Data [0] $end
$var wire 1 g! err_decode $end
$var wire 1 h! immExt [15] $end
$var wire 1 i! immExt [14] $end
$var wire 1 j! immExt [13] $end
$var wire 1 k! immExt [12] $end
$var wire 1 l! immExt [11] $end
$var wire 1 m! immExt [10] $end
$var wire 1 n! immExt [9] $end
$var wire 1 o! immExt [8] $end
$var wire 1 p! immExt [7] $end
$var wire 1 q! immExt [6] $end
$var wire 1 r! immExt [5] $end
$var wire 1 s! immExt [4] $end
$var wire 1 t! immExt [3] $end
$var wire 1 u! immExt [2] $end
$var wire 1 v! immExt [1] $end
$var wire 1 w! immExt [0] $end
$var wire 1 x! aluSel [3] $end
$var wire 1 y! aluSel [2] $end
$var wire 1 z! aluSel [1] $end
$var wire 1 {! aluSel [0] $end
$var wire 1 |! PC [15] $end
$var wire 1 }! PC [14] $end
$var wire 1 ~! PC [13] $end
$var wire 1 !" PC [12] $end
$var wire 1 "" PC [11] $end
$var wire 1 #" PC [10] $end
$var wire 1 $" PC [9] $end
$var wire 1 %" PC [8] $end
$var wire 1 &" PC [7] $end
$var wire 1 '" PC [6] $end
$var wire 1 (" PC [5] $end
$var wire 1 )" PC [4] $end
$var wire 1 *" PC [3] $end
$var wire 1 +" PC [2] $end
$var wire 1 ," PC [1] $end
$var wire 1 -" PC [0] $end
$var wire 1 ." halt $end
$var wire 1 /" jumpImm $end
$var wire 1 0" link $end
$var wire 1 1" jump $end
$var wire 1 2" memRead $end
$var wire 1 3" memToReg $end
$var wire 1 4" memWrite $end
$var wire 1 5" aluSrc $end
$var wire 1 6" regWrite $end
$var wire 1 7" invB $end
$var wire 1 8" exception $end
$var wire 1 9" br_contr $end
$var wire 1 :" internal_clock $end
$var wire 1 ;" branch [2] $end
$var wire 1 <" branch [1] $end
$var wire 1 =" branch [0] $end
$var wire 1 >" regDst [1] $end
$var wire 1 ?" regDst [0] $end
$var wire 1 @" immExtSel [2] $end
$var wire 1 A" immExtSel [1] $end
$var wire 1 B" immExtSel [0] $end
$var wire 1 C" zero_flag $end
$var wire 1 D" signed_flag $end
$var wire 1 E" overflow_flag $end
$var wire 1 F" carry_flag $end
$var wire 1 G" aluOut [15] $end
$var wire 1 H" aluOut [14] $end
$var wire 1 I" aluOut [13] $end
$var wire 1 J" aluOut [12] $end
$var wire 1 K" aluOut [11] $end
$var wire 1 L" aluOut [10] $end
$var wire 1 M" aluOut [9] $end
$var wire 1 N" aluOut [8] $end
$var wire 1 O" aluOut [7] $end
$var wire 1 P" aluOut [6] $end
$var wire 1 Q" aluOut [5] $end
$var wire 1 R" aluOut [4] $end
$var wire 1 S" aluOut [3] $end
$var wire 1 T" aluOut [2] $end
$var wire 1 U" aluOut [1] $end
$var wire 1 V" aluOut [0] $end
$var wire 1 W" readData [15] $end
$var wire 1 X" readData [14] $end
$var wire 1 Y" readData [13] $end
$var wire 1 Z" readData [12] $end
$var wire 1 [" readData [11] $end
$var wire 1 \" readData [10] $end
$var wire 1 ]" readData [9] $end
$var wire 1 ^" readData [8] $end
$var wire 1 _" readData [7] $end
$var wire 1 `" readData [6] $end
$var wire 1 a" readData [5] $end
$var wire 1 b" readData [4] $end
$var wire 1 c" readData [3] $end
$var wire 1 d" readData [2] $end
$var wire 1 e" readData [1] $end
$var wire 1 f" readData [0] $end

$scope module iCONTROL0 $end
$var wire 1 $! opcode [4] $end
$var wire 1 %! opcode [3] $end
$var wire 1 &! opcode [2] $end
$var wire 1 '! opcode [1] $end
$var wire 1 (! opcode [0] $end
$var wire 1 ." halt $end
$var wire 1 /" jumpImm $end
$var wire 1 0" link $end
$var wire 1 1" jump $end
$var wire 1 2" memRead $end
$var wire 1 3" memToReg $end
$var wire 1 4" memWrite $end
$var wire 1 5" aluSrc $end
$var wire 1 6" regWrite $end
$var wire 1 7" invB $end
$var wire 1 8" exception $end
$var wire 1 >" regDst [1] $end
$var wire 1 ?" regDst [0] $end
$var wire 1 ;" branch [2] $end
$var wire 1 <" branch [1] $end
$var wire 1 =" branch [0] $end
$var wire 1 @" immExtSel [2] $end
$var wire 1 A" immExtSel [1] $end
$var wire 1 B" immExtSel [0] $end
$upscope $end

$scope module iBRANCH_CONTROL0 $end
$var wire 1 C" zf $end
$var wire 1 D" sf $end
$var wire 1 E" of $end
$var wire 1 F" cf $end
$var wire 1 ;" br_sig [2] $end
$var wire 1 <" br_sig [1] $end
$var wire 1 =" br_sig [0] $end
$var wire 1 9" br_contr_sig $end
$var wire 1 g" beqz $end
$var wire 1 h" bnez $end
$var wire 1 i" bltz $end
$var wire 1 j" bgtz $end
$upscope $end

$scope module fetch0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 ." halt_sig $end
$var wire 1 /" jump_imm_sig $end
$var wire 1 1" jump_sig $end
$var wire 1 8" except_sig $end
$var wire 1 9" br_contr_sig $end
$var wire 1 V" imm_jump_reg_val $end
$var wire 1 w! imm_br_val $end
$var wire 1 $! instr [15] $end
$var wire 1 %! instr [14] $end
$var wire 1 &! instr [13] $end
$var wire 1 '! instr [12] $end
$var wire 1 (! instr [11] $end
$var wire 1 )! instr [10] $end
$var wire 1 *! instr [9] $end
$var wire 1 +! instr [8] $end
$var wire 1 ,! instr [7] $end
$var wire 1 -! instr [6] $end
$var wire 1 .! instr [5] $end
$var wire 1 /! instr [4] $end
$var wire 1 0! instr [3] $end
$var wire 1 1! instr [2] $end
$var wire 1 2! instr [1] $end
$var wire 1 3! instr [0] $end
$var wire 1 :" output_clk $end
$var wire 1 |! pcCurrent [15] $end
$var wire 1 }! pcCurrent [14] $end
$var wire 1 ~! pcCurrent [13] $end
$var wire 1 !" pcCurrent [12] $end
$var wire 1 "" pcCurrent [11] $end
$var wire 1 #" pcCurrent [10] $end
$var wire 1 $" pcCurrent [9] $end
$var wire 1 %" pcCurrent [8] $end
$var wire 1 &" pcCurrent [7] $end
$var wire 1 '" pcCurrent [6] $end
$var wire 1 (" pcCurrent [5] $end
$var wire 1 )" pcCurrent [4] $end
$var wire 1 *" pcCurrent [3] $end
$var wire 1 +" pcCurrent [2] $end
$var wire 1 ," pcCurrent [1] $end
$var wire 1 -" pcCurrent [0] $end
$var wire 1 k" ECP [15] $end
$var wire 1 l" ECP [14] $end
$var wire 1 m" ECP [13] $end
$var wire 1 n" ECP [12] $end
$var wire 1 o" ECP [11] $end
$var wire 1 p" ECP [10] $end
$var wire 1 q" ECP [9] $end
$var wire 1 r" ECP [8] $end
$var wire 1 s" ECP [7] $end
$var wire 1 t" ECP [6] $end
$var wire 1 u" ECP [5] $end
$var wire 1 v" ECP [4] $end
$var wire 1 w" ECP [3] $end
$var wire 1 x" ECP [2] $end
$var wire 1 y" ECP [1] $end
$var wire 1 z" ECP [0] $end
$var wire 1 {" PC_2 [15] $end
$var wire 1 |" PC_2 [14] $end
$var wire 1 }" PC_2 [13] $end
$var wire 1 ~" PC_2 [12] $end
$var wire 1 !# PC_2 [11] $end
$var wire 1 "# PC_2 [10] $end
$var wire 1 ## PC_2 [9] $end
$var wire 1 $# PC_2 [8] $end
$var wire 1 %# PC_2 [7] $end
$var wire 1 &# PC_2 [6] $end
$var wire 1 '# PC_2 [5] $end
$var wire 1 (# PC_2 [4] $end
$var wire 1 )# PC_2 [3] $end
$var wire 1 *# PC_2 [2] $end
$var wire 1 +# PC_2 [1] $end
$var wire 1 ,# PC_2 [0] $end
$var wire 1 -# PC_jump_Imm [15] $end
$var wire 1 .# PC_jump_Imm [14] $end
$var wire 1 /# PC_jump_Imm [13] $end
$var wire 1 0# PC_jump_Imm [12] $end
$var wire 1 1# PC_jump_Imm [11] $end
$var wire 1 2# PC_jump_Imm [10] $end
$var wire 1 3# PC_jump_Imm [9] $end
$var wire 1 4# PC_jump_Imm [8] $end
$var wire 1 5# PC_jump_Imm [7] $end
$var wire 1 6# PC_jump_Imm [6] $end
$var wire 1 7# PC_jump_Imm [5] $end
$var wire 1 8# PC_jump_Imm [4] $end
$var wire 1 9# PC_jump_Imm [3] $end
$var wire 1 :# PC_jump_Imm [2] $end
$var wire 1 ;# PC_jump_Imm [1] $end
$var wire 1 <# PC_jump_Imm [0] $end
$var wire 1 =# jump_imm_addr [15] $end
$var wire 1 ># jump_imm_addr [14] $end
$var wire 1 ?# jump_imm_addr [13] $end
$var wire 1 @# jump_imm_addr [12] $end
$var wire 1 A# jump_imm_addr [11] $end
$var wire 1 B# jump_imm_addr [10] $end
$var wire 1 C# jump_imm_addr [9] $end
$var wire 1 D# jump_imm_addr [8] $end
$var wire 1 E# jump_imm_addr [7] $end
$var wire 1 F# jump_imm_addr [6] $end
$var wire 1 G# jump_imm_addr [5] $end
$var wire 1 H# jump_imm_addr [4] $end
$var wire 1 I# jump_imm_addr [3] $end
$var wire 1 J# jump_imm_addr [2] $end
$var wire 1 K# jump_imm_addr [1] $end
$var wire 1 L# jump_imm_addr [0] $end
$var wire 1 M# br_imm_addr [15] $end
$var wire 1 N# br_imm_addr [14] $end
$var wire 1 O# br_imm_addr [13] $end
$var wire 1 P# br_imm_addr [12] $end
$var wire 1 Q# br_imm_addr [11] $end
$var wire 1 R# br_imm_addr [10] $end
$var wire 1 S# br_imm_addr [9] $end
$var wire 1 T# br_imm_addr [8] $end
$var wire 1 U# br_imm_addr [7] $end
$var wire 1 V# br_imm_addr [6] $end
$var wire 1 W# br_imm_addr [5] $end
$var wire 1 X# br_imm_addr [4] $end
$var wire 1 Y# br_imm_addr [3] $end
$var wire 1 Z# br_imm_addr [2] $end
$var wire 1 [# br_imm_addr [1] $end
$var wire 1 \# br_imm_addr [0] $end
$var wire 1 ]# addr_pre_exception [15] $end
$var wire 1 ^# addr_pre_exception [14] $end
$var wire 1 _# addr_pre_exception [13] $end
$var wire 1 `# addr_pre_exception [12] $end
$var wire 1 a# addr_pre_exception [11] $end
$var wire 1 b# addr_pre_exception [10] $end
$var wire 1 c# addr_pre_exception [9] $end
$var wire 1 d# addr_pre_exception [8] $end
$var wire 1 e# addr_pre_exception [7] $end
$var wire 1 f# addr_pre_exception [6] $end
$var wire 1 g# addr_pre_exception [5] $end
$var wire 1 h# addr_pre_exception [4] $end
$var wire 1 i# addr_pre_exception [3] $end
$var wire 1 j# addr_pre_exception [2] $end
$var wire 1 k# addr_pre_exception [1] $end
$var wire 1 l# addr_pre_exception [0] $end

$scope module instr_mem $end
$var wire 1 $! data_out [15] $end
$var wire 1 %! data_out [14] $end
$var wire 1 &! data_out [13] $end
$var wire 1 '! data_out [12] $end
$var wire 1 (! data_out [11] $end
$var wire 1 )! data_out [10] $end
$var wire 1 *! data_out [9] $end
$var wire 1 +! data_out [8] $end
$var wire 1 ,! data_out [7] $end
$var wire 1 -! data_out [6] $end
$var wire 1 .! data_out [5] $end
$var wire 1 /! data_out [4] $end
$var wire 1 0! data_out [3] $end
$var wire 1 1! data_out [2] $end
$var wire 1 2! data_out [1] $end
$var wire 1 3! data_out [0] $end
$var wire 1 m# data_in [15] $end
$var wire 1 n# data_in [14] $end
$var wire 1 o# data_in [13] $end
$var wire 1 p# data_in [12] $end
$var wire 1 q# data_in [11] $end
$var wire 1 r# data_in [10] $end
$var wire 1 s# data_in [9] $end
$var wire 1 t# data_in [8] $end
$var wire 1 u# data_in [7] $end
$var wire 1 v# data_in [6] $end
$var wire 1 w# data_in [5] $end
$var wire 1 x# data_in [4] $end
$var wire 1 y# data_in [3] $end
$var wire 1 z# data_in [2] $end
$var wire 1 {# data_in [1] $end
$var wire 1 |# data_in [0] $end
$var wire 1 |! addr [15] $end
$var wire 1 }! addr [14] $end
$var wire 1 ~! addr [13] $end
$var wire 1 !" addr [12] $end
$var wire 1 "" addr [11] $end
$var wire 1 #" addr [10] $end
$var wire 1 $" addr [9] $end
$var wire 1 %" addr [8] $end
$var wire 1 &" addr [7] $end
$var wire 1 '" addr [6] $end
$var wire 1 (" addr [5] $end
$var wire 1 )" addr [4] $end
$var wire 1 *" addr [3] $end
$var wire 1 +" addr [2] $end
$var wire 1 ," addr [1] $end
$var wire 1 -" addr [0] $end
$var wire 1 }# enable $end
$var wire 1 ~# wr $end
$var wire 1 !$ createdump $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 "$ loaded $end
$var reg 17 #$ largest [16:0] $end
$var integer 32 $$ mcd $end
$var integer 32 %$ i $end
$upscope $end
$upscope $end

$scope module decode0 $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 )! read1RegSel [2] $end
$var wire 1 *! read1RegSel [1] $end
$var wire 1 +! read1RegSel [0] $end
$var wire 1 ,! read2RegSel [2] $end
$var wire 1 -! read2RegSel [1] $end
$var wire 1 .! read2RegSel [0] $end
$var wire 1 4! writeregsel [2] $end
$var wire 1 5! writeregsel [1] $end
$var wire 1 6! writeregsel [0] $end
$var wire 1 7! writedata [15] $end
$var wire 1 8! writedata [14] $end
$var wire 1 9! writedata [13] $end
$var wire 1 :! writedata [12] $end
$var wire 1 ;! writedata [11] $end
$var wire 1 <! writedata [10] $end
$var wire 1 =! writedata [9] $end
$var wire 1 >! writedata [8] $end
$var wire 1 ?! writedata [7] $end
$var wire 1 @! writedata [6] $end
$var wire 1 A! writedata [5] $end
$var wire 1 B! writedata [4] $end
$var wire 1 C! writedata [3] $end
$var wire 1 D! writedata [2] $end
$var wire 1 E! writedata [1] $end
$var wire 1 F! writedata [0] $end
$var wire 1 6" write $end
$var wire 1 /! imm_5 [4] $end
$var wire 1 0! imm_5 [3] $end
$var wire 1 1! imm_5 [2] $end
$var wire 1 2! imm_5 [1] $end
$var wire 1 3! imm_5 [0] $end
$var wire 1 ,! imm_8 [7] $end
$var wire 1 -! imm_8 [6] $end
$var wire 1 .! imm_8 [5] $end
$var wire 1 /! imm_8 [4] $end
$var wire 1 0! imm_8 [3] $end
$var wire 1 1! imm_8 [2] $end
$var wire 1 2! imm_8 [1] $end
$var wire 1 3! imm_8 [0] $end
$var wire 1 )! imm_11 [10] $end
$var wire 1 *! imm_11 [9] $end
$var wire 1 +! imm_11 [8] $end
$var wire 1 ,! imm_11 [7] $end
$var wire 1 -! imm_11 [6] $end
$var wire 1 .! imm_11 [5] $end
$var wire 1 /! imm_11 [4] $end
$var wire 1 0! imm_11 [3] $end
$var wire 1 1! imm_11 [2] $end
$var wire 1 2! imm_11 [1] $end
$var wire 1 3! imm_11 [0] $end
$var wire 1 @" immExtSel [2] $end
$var wire 1 A" immExtSel [1] $end
$var wire 1 B" immExtSel [0] $end
$var wire 1 G! read1Data [15] $end
$var wire 1 H! read1Data [14] $end
$var wire 1 I! read1Data [13] $end
$var wire 1 J! read1Data [12] $end
$var wire 1 K! read1Data [11] $end
$var wire 1 L! read1Data [10] $end
$var wire 1 M! read1Data [9] $end
$var wire 1 N! read1Data [8] $end
$var wire 1 O! read1Data [7] $end
$var wire 1 P! read1Data [6] $end
$var wire 1 Q! read1Data [5] $end
$var wire 1 R! read1Data [4] $end
$var wire 1 S! read1Data [3] $end
$var wire 1 T! read1Data [2] $end
$var wire 1 U! read1Data [1] $end
$var wire 1 V! read1Data [0] $end
$var wire 1 W! read2Data [15] $end
$var wire 1 X! read2Data [14] $end
$var wire 1 Y! read2Data [13] $end
$var wire 1 Z! read2Data [12] $end
$var wire 1 [! read2Data [11] $end
$var wire 1 \! read2Data [10] $end
$var wire 1 ]! read2Data [9] $end
$var wire 1 ^! read2Data [8] $end
$var wire 1 _! read2Data [7] $end
$var wire 1 `! read2Data [6] $end
$var wire 1 a! read2Data [5] $end
$var wire 1 b! read2Data [4] $end
$var wire 1 c! read2Data [3] $end
$var wire 1 d! read2Data [2] $end
$var wire 1 e! read2Data [1] $end
$var wire 1 f! read2Data [0] $end
$var wire 1 g! err $end
$var wire 1 h! immExt [15] $end
$var wire 1 i! immExt [14] $end
$var wire 1 j! immExt [13] $end
$var wire 1 k! immExt [12] $end
$var wire 1 l! immExt [11] $end
$var wire 1 m! immExt [10] $end
$var wire 1 n! immExt [9] $end
$var wire 1 o! immExt [8] $end
$var wire 1 p! immExt [7] $end
$var wire 1 q! immExt [6] $end
$var wire 1 r! immExt [5] $end
$var wire 1 s! immExt [4] $end
$var wire 1 t! immExt [3] $end
$var wire 1 u! immExt [2] $end
$var wire 1 v! immExt [1] $end
$var wire 1 w! immExt [0] $end

$scope module regFile0 $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 )! read1RegSel [2] $end
$var wire 1 *! read1RegSel [1] $end
$var wire 1 +! read1RegSel [0] $end
$var wire 1 ,! read2RegSel [2] $end
$var wire 1 -! read2RegSel [1] $end
$var wire 1 .! read2RegSel [0] $end
$var wire 1 4! writeregsel [2] $end
$var wire 1 5! writeregsel [1] $end
$var wire 1 6! writeregsel [0] $end
$var wire 1 7! writedata [15] $end
$var wire 1 8! writedata [14] $end
$var wire 1 9! writedata [13] $end
$var wire 1 :! writedata [12] $end
$var wire 1 ;! writedata [11] $end
$var wire 1 <! writedata [10] $end
$var wire 1 =! writedata [9] $end
$var wire 1 >! writedata [8] $end
$var wire 1 ?! writedata [7] $end
$var wire 1 @! writedata [6] $end
$var wire 1 A! writedata [5] $end
$var wire 1 B! writedata [4] $end
$var wire 1 C! writedata [3] $end
$var wire 1 D! writedata [2] $end
$var wire 1 E! writedata [1] $end
$var wire 1 F! writedata [0] $end
$var wire 1 6" write $end
$var wire 1 G! read1Data [15] $end
$var wire 1 H! read1Data [14] $end
$var wire 1 I! read1Data [13] $end
$var wire 1 J! read1Data [12] $end
$var wire 1 K! read1Data [11] $end
$var wire 1 L! read1Data [10] $end
$var wire 1 M! read1Data [9] $end
$var wire 1 N! read1Data [8] $end
$var wire 1 O! read1Data [7] $end
$var wire 1 P! read1Data [6] $end
$var wire 1 Q! read1Data [5] $end
$var wire 1 R! read1Data [4] $end
$var wire 1 S! read1Data [3] $end
$var wire 1 T! read1Data [2] $end
$var wire 1 U! read1Data [1] $end
$var wire 1 V! read1Data [0] $end
$var wire 1 W! read2Data [15] $end
$var wire 1 X! read2Data [14] $end
$var wire 1 Y! read2Data [13] $end
$var wire 1 Z! read2Data [12] $end
$var wire 1 [! read2Data [11] $end
$var wire 1 \! read2Data [10] $end
$var wire 1 ]! read2Data [9] $end
$var wire 1 ^! read2Data [8] $end
$var wire 1 _! read2Data [7] $end
$var wire 1 `! read2Data [6] $end
$var wire 1 a! read2Data [5] $end
$var wire 1 b! read2Data [4] $end
$var wire 1 c! read2Data [3] $end
$var wire 1 d! read2Data [2] $end
$var wire 1 e! read2Data [1] $end
$var wire 1 f! read2Data [0] $end
$var wire 1 g! err $end
$var wire 1 &$ reg_out [0] $end
$var wire 1 '$ reg_out [1] $end
$var wire 1 ($ reg_out [2] $end
$var wire 1 )$ reg_out [3] $end
$var wire 1 *$ reg_out [4] $end
$var wire 1 +$ reg_out [5] $end
$var wire 1 ,$ reg_out [6] $end
$var wire 1 -$ reg_out [7] $end
$var wire 1 .$ reg_out [8] $end
$var wire 1 /$ reg_out [9] $end
$var wire 1 0$ reg_out [10] $end
$var wire 1 1$ reg_out [11] $end
$var wire 1 2$ reg_out [12] $end
$var wire 1 3$ reg_out [13] $end
$var wire 1 4$ reg_out [14] $end
$var wire 1 5$ reg_out [15] $end
$var wire 1 6$ reg_out [16] $end
$var wire 1 7$ reg_out [17] $end
$var wire 1 8$ reg_out [18] $end
$var wire 1 9$ reg_out [19] $end
$var wire 1 :$ reg_out [20] $end
$var wire 1 ;$ reg_out [21] $end
$var wire 1 <$ reg_out [22] $end
$var wire 1 =$ reg_out [23] $end
$var wire 1 >$ reg_out [24] $end
$var wire 1 ?$ reg_out [25] $end
$var wire 1 @$ reg_out [26] $end
$var wire 1 A$ reg_out [27] $end
$var wire 1 B$ reg_out [28] $end
$var wire 1 C$ reg_out [29] $end
$var wire 1 D$ reg_out [30] $end
$var wire 1 E$ reg_out [31] $end

$scope module iRF0 $end
$var parameter 32 F$ REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 )! read1RegSel [2] $end
$var wire 1 *! read1RegSel [1] $end
$var wire 1 +! read1RegSel [0] $end
$var wire 1 ,! read2RegSel [2] $end
$var wire 1 -! read2RegSel [1] $end
$var wire 1 .! read2RegSel [0] $end
$var wire 1 4! writeRegSel [2] $end
$var wire 1 5! writeRegSel [1] $end
$var wire 1 6! writeRegSel [0] $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 6" writeEn $end
$var wire 1 E$ read1Data [15] $end
$var wire 1 D$ read1Data [14] $end
$var wire 1 C$ read1Data [13] $end
$var wire 1 B$ read1Data [12] $end
$var wire 1 A$ read1Data [11] $end
$var wire 1 @$ read1Data [10] $end
$var wire 1 ?$ read1Data [9] $end
$var wire 1 >$ read1Data [8] $end
$var wire 1 =$ read1Data [7] $end
$var wire 1 <$ read1Data [6] $end
$var wire 1 ;$ read1Data [5] $end
$var wire 1 :$ read1Data [4] $end
$var wire 1 9$ read1Data [3] $end
$var wire 1 8$ read1Data [2] $end
$var wire 1 7$ read1Data [1] $end
$var wire 1 6$ read1Data [0] $end
$var wire 1 5$ read2Data [15] $end
$var wire 1 4$ read2Data [14] $end
$var wire 1 3$ read2Data [13] $end
$var wire 1 2$ read2Data [12] $end
$var wire 1 1$ read2Data [11] $end
$var wire 1 0$ read2Data [10] $end
$var wire 1 /$ read2Data [9] $end
$var wire 1 .$ read2Data [8] $end
$var wire 1 -$ read2Data [7] $end
$var wire 1 ,$ read2Data [6] $end
$var wire 1 +$ read2Data [5] $end
$var wire 1 *$ read2Data [4] $end
$var wire 1 )$ read2Data [3] $end
$var wire 1 ($ read2Data [2] $end
$var wire 1 '$ read2Data [1] $end
$var wire 1 &$ read2Data [0] $end
$var wire 1 g! err $end
$var wire 1 G$ reg_out [0] $end
$var wire 1 H$ reg_out [1] $end
$var wire 1 I$ reg_out [2] $end
$var wire 1 J$ reg_out [3] $end
$var wire 1 K$ reg_out [4] $end
$var wire 1 L$ reg_out [5] $end
$var wire 1 M$ reg_out [6] $end
$var wire 1 N$ reg_out [7] $end
$var wire 1 O$ reg_out [8] $end
$var wire 1 P$ reg_out [9] $end
$var wire 1 Q$ reg_out [10] $end
$var wire 1 R$ reg_out [11] $end
$var wire 1 S$ reg_out [12] $end
$var wire 1 T$ reg_out [13] $end
$var wire 1 U$ reg_out [14] $end
$var wire 1 V$ reg_out [15] $end
$var wire 1 W$ reg_out [16] $end
$var wire 1 X$ reg_out [17] $end
$var wire 1 Y$ reg_out [18] $end
$var wire 1 Z$ reg_out [19] $end
$var wire 1 [$ reg_out [20] $end
$var wire 1 \$ reg_out [21] $end
$var wire 1 ]$ reg_out [22] $end
$var wire 1 ^$ reg_out [23] $end
$var wire 1 _$ reg_out [24] $end
$var wire 1 `$ reg_out [25] $end
$var wire 1 a$ reg_out [26] $end
$var wire 1 b$ reg_out [27] $end
$var wire 1 c$ reg_out [28] $end
$var wire 1 d$ reg_out [29] $end
$var wire 1 e$ reg_out [30] $end
$var wire 1 f$ reg_out [31] $end
$var wire 1 g$ reg_out [32] $end
$var wire 1 h$ reg_out [33] $end
$var wire 1 i$ reg_out [34] $end
$var wire 1 j$ reg_out [35] $end
$var wire 1 k$ reg_out [36] $end
$var wire 1 l$ reg_out [37] $end
$var wire 1 m$ reg_out [38] $end
$var wire 1 n$ reg_out [39] $end
$var wire 1 o$ reg_out [40] $end
$var wire 1 p$ reg_out [41] $end
$var wire 1 q$ reg_out [42] $end
$var wire 1 r$ reg_out [43] $end
$var wire 1 s$ reg_out [44] $end
$var wire 1 t$ reg_out [45] $end
$var wire 1 u$ reg_out [46] $end
$var wire 1 v$ reg_out [47] $end
$var wire 1 w$ reg_out [48] $end
$var wire 1 x$ reg_out [49] $end
$var wire 1 y$ reg_out [50] $end
$var wire 1 z$ reg_out [51] $end
$var wire 1 {$ reg_out [52] $end
$var wire 1 |$ reg_out [53] $end
$var wire 1 }$ reg_out [54] $end
$var wire 1 ~$ reg_out [55] $end
$var wire 1 !% reg_out [56] $end
$var wire 1 "% reg_out [57] $end
$var wire 1 #% reg_out [58] $end
$var wire 1 $% reg_out [59] $end
$var wire 1 %% reg_out [60] $end
$var wire 1 &% reg_out [61] $end
$var wire 1 '% reg_out [62] $end
$var wire 1 (% reg_out [63] $end
$var wire 1 )% reg_out [64] $end
$var wire 1 *% reg_out [65] $end
$var wire 1 +% reg_out [66] $end
$var wire 1 ,% reg_out [67] $end
$var wire 1 -% reg_out [68] $end
$var wire 1 .% reg_out [69] $end
$var wire 1 /% reg_out [70] $end
$var wire 1 0% reg_out [71] $end
$var wire 1 1% reg_out [72] $end
$var wire 1 2% reg_out [73] $end
$var wire 1 3% reg_out [74] $end
$var wire 1 4% reg_out [75] $end
$var wire 1 5% reg_out [76] $end
$var wire 1 6% reg_out [77] $end
$var wire 1 7% reg_out [78] $end
$var wire 1 8% reg_out [79] $end
$var wire 1 9% reg_out [80] $end
$var wire 1 :% reg_out [81] $end
$var wire 1 ;% reg_out [82] $end
$var wire 1 <% reg_out [83] $end
$var wire 1 =% reg_out [84] $end
$var wire 1 >% reg_out [85] $end
$var wire 1 ?% reg_out [86] $end
$var wire 1 @% reg_out [87] $end
$var wire 1 A% reg_out [88] $end
$var wire 1 B% reg_out [89] $end
$var wire 1 C% reg_out [90] $end
$var wire 1 D% reg_out [91] $end
$var wire 1 E% reg_out [92] $end
$var wire 1 F% reg_out [93] $end
$var wire 1 G% reg_out [94] $end
$var wire 1 H% reg_out [95] $end
$var wire 1 I% reg_out [96] $end
$var wire 1 J% reg_out [97] $end
$var wire 1 K% reg_out [98] $end
$var wire 1 L% reg_out [99] $end
$var wire 1 M% reg_out [100] $end
$var wire 1 N% reg_out [101] $end
$var wire 1 O% reg_out [102] $end
$var wire 1 P% reg_out [103] $end
$var wire 1 Q% reg_out [104] $end
$var wire 1 R% reg_out [105] $end
$var wire 1 S% reg_out [106] $end
$var wire 1 T% reg_out [107] $end
$var wire 1 U% reg_out [108] $end
$var wire 1 V% reg_out [109] $end
$var wire 1 W% reg_out [110] $end
$var wire 1 X% reg_out [111] $end
$var wire 1 Y% reg_out [112] $end
$var wire 1 Z% reg_out [113] $end
$var wire 1 [% reg_out [114] $end
$var wire 1 \% reg_out [115] $end
$var wire 1 ]% reg_out [116] $end
$var wire 1 ^% reg_out [117] $end
$var wire 1 _% reg_out [118] $end
$var wire 1 `% reg_out [119] $end
$var wire 1 a% reg_out [120] $end
$var wire 1 b% reg_out [121] $end
$var wire 1 c% reg_out [122] $end
$var wire 1 d% reg_out [123] $end
$var wire 1 e% reg_out [124] $end
$var wire 1 f% reg_out [125] $end
$var wire 1 g% reg_out [126] $end
$var wire 1 h% reg_out [127] $end
$var wire 1 i% writeReg0 $end
$var wire 1 j% writeReg1 $end
$var wire 1 k% writeReg2 $end
$var wire 1 l% writeReg3 $end
$var wire 1 m% writeReg4 $end
$var wire 1 n% writeReg5 $end
$var wire 1 o% writeReg6 $end
$var wire 1 p% writeReg7 $end

$scope module iREGISTER_0 $end
$var parameter 32 q% REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 r% writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 h% readData [15] $end
$var wire 1 g% readData [14] $end
$var wire 1 f% readData [13] $end
$var wire 1 e% readData [12] $end
$var wire 1 d% readData [11] $end
$var wire 1 c% readData [10] $end
$var wire 1 b% readData [9] $end
$var wire 1 a% readData [8] $end
$var wire 1 `% readData [7] $end
$var wire 1 _% readData [6] $end
$var wire 1 ^% readData [5] $end
$var wire 1 ]% readData [4] $end
$var wire 1 \% readData [3] $end
$var wire 1 [% readData [2] $end
$var wire 1 Z% readData [1] $end
$var wire 1 Y% readData [0] $end
$var wire 1 s% newData [15] $end
$var wire 1 t% newData [14] $end
$var wire 1 u% newData [13] $end
$var wire 1 v% newData [12] $end
$var wire 1 w% newData [11] $end
$var wire 1 x% newData [10] $end
$var wire 1 y% newData [9] $end
$var wire 1 z% newData [8] $end
$var wire 1 {% newData [7] $end
$var wire 1 |% newData [6] $end
$var wire 1 }% newData [5] $end
$var wire 1 ~% newData [4] $end
$var wire 1 !& newData [3] $end
$var wire 1 "& newData [2] $end
$var wire 1 #& newData [1] $end
$var wire 1 $& newData [0] $end
$var wire 1 %& currentData [15] $end
$var wire 1 && currentData [14] $end
$var wire 1 '& currentData [13] $end
$var wire 1 (& currentData [12] $end
$var wire 1 )& currentData [11] $end
$var wire 1 *& currentData [10] $end
$var wire 1 +& currentData [9] $end
$var wire 1 ,& currentData [8] $end
$var wire 1 -& currentData [7] $end
$var wire 1 .& currentData [6] $end
$var wire 1 /& currentData [5] $end
$var wire 1 0& currentData [4] $end
$var wire 1 1& currentData [3] $end
$var wire 1 2& currentData [2] $end
$var wire 1 3& currentData [1] $end
$var wire 1 4& currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 %& q $end
$var wire 1 s% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 5& state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 && q $end
$var wire 1 t% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 6& state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 '& q $end
$var wire 1 u% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 7& state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 (& q $end
$var wire 1 v% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 8& state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 )& q $end
$var wire 1 w% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 9& state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 *& q $end
$var wire 1 x% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 :& state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 +& q $end
$var wire 1 y% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ;& state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 ,& q $end
$var wire 1 z% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 <& state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 -& q $end
$var wire 1 {% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 =& state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 .& q $end
$var wire 1 |% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 >& state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 /& q $end
$var wire 1 }% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ?& state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 0& q $end
$var wire 1 ~% d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 @& state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 1& q $end
$var wire 1 !& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 A& state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 2& q $end
$var wire 1 "& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 B& state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 3& q $end
$var wire 1 #& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 C& state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 4& q $end
$var wire 1 $& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 D& state $end
$upscope $end
$upscope $end

$scope module iREGISTER_1 $end
$var parameter 32 E& REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 F& writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 X% readData [15] $end
$var wire 1 W% readData [14] $end
$var wire 1 V% readData [13] $end
$var wire 1 U% readData [12] $end
$var wire 1 T% readData [11] $end
$var wire 1 S% readData [10] $end
$var wire 1 R% readData [9] $end
$var wire 1 Q% readData [8] $end
$var wire 1 P% readData [7] $end
$var wire 1 O% readData [6] $end
$var wire 1 N% readData [5] $end
$var wire 1 M% readData [4] $end
$var wire 1 L% readData [3] $end
$var wire 1 K% readData [2] $end
$var wire 1 J% readData [1] $end
$var wire 1 I% readData [0] $end
$var wire 1 G& newData [15] $end
$var wire 1 H& newData [14] $end
$var wire 1 I& newData [13] $end
$var wire 1 J& newData [12] $end
$var wire 1 K& newData [11] $end
$var wire 1 L& newData [10] $end
$var wire 1 M& newData [9] $end
$var wire 1 N& newData [8] $end
$var wire 1 O& newData [7] $end
$var wire 1 P& newData [6] $end
$var wire 1 Q& newData [5] $end
$var wire 1 R& newData [4] $end
$var wire 1 S& newData [3] $end
$var wire 1 T& newData [2] $end
$var wire 1 U& newData [1] $end
$var wire 1 V& newData [0] $end
$var wire 1 W& currentData [15] $end
$var wire 1 X& currentData [14] $end
$var wire 1 Y& currentData [13] $end
$var wire 1 Z& currentData [12] $end
$var wire 1 [& currentData [11] $end
$var wire 1 \& currentData [10] $end
$var wire 1 ]& currentData [9] $end
$var wire 1 ^& currentData [8] $end
$var wire 1 _& currentData [7] $end
$var wire 1 `& currentData [6] $end
$var wire 1 a& currentData [5] $end
$var wire 1 b& currentData [4] $end
$var wire 1 c& currentData [3] $end
$var wire 1 d& currentData [2] $end
$var wire 1 e& currentData [1] $end
$var wire 1 f& currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 W& q $end
$var wire 1 G& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 g& state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 X& q $end
$var wire 1 H& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 h& state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 Y& q $end
$var wire 1 I& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 i& state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 Z& q $end
$var wire 1 J& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 j& state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 [& q $end
$var wire 1 K& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 k& state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 \& q $end
$var wire 1 L& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 l& state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 ]& q $end
$var wire 1 M& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 m& state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 ^& q $end
$var wire 1 N& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 n& state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 _& q $end
$var wire 1 O& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 o& state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 `& q $end
$var wire 1 P& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 p& state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 a& q $end
$var wire 1 Q& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 q& state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 b& q $end
$var wire 1 R& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 r& state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 c& q $end
$var wire 1 S& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 s& state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 d& q $end
$var wire 1 T& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 t& state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 e& q $end
$var wire 1 U& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 u& state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 f& q $end
$var wire 1 V& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 v& state $end
$upscope $end
$upscope $end

$scope module iREGISTER_2 $end
$var parameter 32 w& REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 x& writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 H% readData [15] $end
$var wire 1 G% readData [14] $end
$var wire 1 F% readData [13] $end
$var wire 1 E% readData [12] $end
$var wire 1 D% readData [11] $end
$var wire 1 C% readData [10] $end
$var wire 1 B% readData [9] $end
$var wire 1 A% readData [8] $end
$var wire 1 @% readData [7] $end
$var wire 1 ?% readData [6] $end
$var wire 1 >% readData [5] $end
$var wire 1 =% readData [4] $end
$var wire 1 <% readData [3] $end
$var wire 1 ;% readData [2] $end
$var wire 1 :% readData [1] $end
$var wire 1 9% readData [0] $end
$var wire 1 y& newData [15] $end
$var wire 1 z& newData [14] $end
$var wire 1 {& newData [13] $end
$var wire 1 |& newData [12] $end
$var wire 1 }& newData [11] $end
$var wire 1 ~& newData [10] $end
$var wire 1 !' newData [9] $end
$var wire 1 "' newData [8] $end
$var wire 1 #' newData [7] $end
$var wire 1 $' newData [6] $end
$var wire 1 %' newData [5] $end
$var wire 1 &' newData [4] $end
$var wire 1 '' newData [3] $end
$var wire 1 (' newData [2] $end
$var wire 1 )' newData [1] $end
$var wire 1 *' newData [0] $end
$var wire 1 +' currentData [15] $end
$var wire 1 ,' currentData [14] $end
$var wire 1 -' currentData [13] $end
$var wire 1 .' currentData [12] $end
$var wire 1 /' currentData [11] $end
$var wire 1 0' currentData [10] $end
$var wire 1 1' currentData [9] $end
$var wire 1 2' currentData [8] $end
$var wire 1 3' currentData [7] $end
$var wire 1 4' currentData [6] $end
$var wire 1 5' currentData [5] $end
$var wire 1 6' currentData [4] $end
$var wire 1 7' currentData [3] $end
$var wire 1 8' currentData [2] $end
$var wire 1 9' currentData [1] $end
$var wire 1 :' currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 +' q $end
$var wire 1 y& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ;' state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 ,' q $end
$var wire 1 z& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 <' state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 -' q $end
$var wire 1 {& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 =' state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 .' q $end
$var wire 1 |& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 >' state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 /' q $end
$var wire 1 }& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ?' state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 0' q $end
$var wire 1 ~& d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 @' state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 1' q $end
$var wire 1 !' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 A' state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 2' q $end
$var wire 1 "' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 B' state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 3' q $end
$var wire 1 #' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 C' state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 4' q $end
$var wire 1 $' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 D' state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 5' q $end
$var wire 1 %' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 E' state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 6' q $end
$var wire 1 &' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 F' state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 7' q $end
$var wire 1 '' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 G' state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 8' q $end
$var wire 1 (' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 H' state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 9' q $end
$var wire 1 )' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 I' state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 :' q $end
$var wire 1 *' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 J' state $end
$upscope $end
$upscope $end

$scope module iREGISTER_3 $end
$var parameter 32 K' REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 L' writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 8% readData [15] $end
$var wire 1 7% readData [14] $end
$var wire 1 6% readData [13] $end
$var wire 1 5% readData [12] $end
$var wire 1 4% readData [11] $end
$var wire 1 3% readData [10] $end
$var wire 1 2% readData [9] $end
$var wire 1 1% readData [8] $end
$var wire 1 0% readData [7] $end
$var wire 1 /% readData [6] $end
$var wire 1 .% readData [5] $end
$var wire 1 -% readData [4] $end
$var wire 1 ,% readData [3] $end
$var wire 1 +% readData [2] $end
$var wire 1 *% readData [1] $end
$var wire 1 )% readData [0] $end
$var wire 1 M' newData [15] $end
$var wire 1 N' newData [14] $end
$var wire 1 O' newData [13] $end
$var wire 1 P' newData [12] $end
$var wire 1 Q' newData [11] $end
$var wire 1 R' newData [10] $end
$var wire 1 S' newData [9] $end
$var wire 1 T' newData [8] $end
$var wire 1 U' newData [7] $end
$var wire 1 V' newData [6] $end
$var wire 1 W' newData [5] $end
$var wire 1 X' newData [4] $end
$var wire 1 Y' newData [3] $end
$var wire 1 Z' newData [2] $end
$var wire 1 [' newData [1] $end
$var wire 1 \' newData [0] $end
$var wire 1 ]' currentData [15] $end
$var wire 1 ^' currentData [14] $end
$var wire 1 _' currentData [13] $end
$var wire 1 `' currentData [12] $end
$var wire 1 a' currentData [11] $end
$var wire 1 b' currentData [10] $end
$var wire 1 c' currentData [9] $end
$var wire 1 d' currentData [8] $end
$var wire 1 e' currentData [7] $end
$var wire 1 f' currentData [6] $end
$var wire 1 g' currentData [5] $end
$var wire 1 h' currentData [4] $end
$var wire 1 i' currentData [3] $end
$var wire 1 j' currentData [2] $end
$var wire 1 k' currentData [1] $end
$var wire 1 l' currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 ]' q $end
$var wire 1 M' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 m' state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 ^' q $end
$var wire 1 N' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 n' state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 _' q $end
$var wire 1 O' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 o' state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 `' q $end
$var wire 1 P' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 p' state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 a' q $end
$var wire 1 Q' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 q' state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 b' q $end
$var wire 1 R' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 r' state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 c' q $end
$var wire 1 S' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 s' state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 d' q $end
$var wire 1 T' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 t' state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 e' q $end
$var wire 1 U' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 u' state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 f' q $end
$var wire 1 V' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 v' state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 g' q $end
$var wire 1 W' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 w' state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 h' q $end
$var wire 1 X' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 x' state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 i' q $end
$var wire 1 Y' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 y' state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 j' q $end
$var wire 1 Z' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 z' state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 k' q $end
$var wire 1 [' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 {' state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 l' q $end
$var wire 1 \' d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 |' state $end
$upscope $end
$upscope $end

$scope module iREGISTER_4 $end
$var parameter 32 }' REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 ~' writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 (% readData [15] $end
$var wire 1 '% readData [14] $end
$var wire 1 &% readData [13] $end
$var wire 1 %% readData [12] $end
$var wire 1 $% readData [11] $end
$var wire 1 #% readData [10] $end
$var wire 1 "% readData [9] $end
$var wire 1 !% readData [8] $end
$var wire 1 ~$ readData [7] $end
$var wire 1 }$ readData [6] $end
$var wire 1 |$ readData [5] $end
$var wire 1 {$ readData [4] $end
$var wire 1 z$ readData [3] $end
$var wire 1 y$ readData [2] $end
$var wire 1 x$ readData [1] $end
$var wire 1 w$ readData [0] $end
$var wire 1 !( newData [15] $end
$var wire 1 "( newData [14] $end
$var wire 1 #( newData [13] $end
$var wire 1 $( newData [12] $end
$var wire 1 %( newData [11] $end
$var wire 1 &( newData [10] $end
$var wire 1 '( newData [9] $end
$var wire 1 (( newData [8] $end
$var wire 1 )( newData [7] $end
$var wire 1 *( newData [6] $end
$var wire 1 +( newData [5] $end
$var wire 1 ,( newData [4] $end
$var wire 1 -( newData [3] $end
$var wire 1 .( newData [2] $end
$var wire 1 /( newData [1] $end
$var wire 1 0( newData [0] $end
$var wire 1 1( currentData [15] $end
$var wire 1 2( currentData [14] $end
$var wire 1 3( currentData [13] $end
$var wire 1 4( currentData [12] $end
$var wire 1 5( currentData [11] $end
$var wire 1 6( currentData [10] $end
$var wire 1 7( currentData [9] $end
$var wire 1 8( currentData [8] $end
$var wire 1 9( currentData [7] $end
$var wire 1 :( currentData [6] $end
$var wire 1 ;( currentData [5] $end
$var wire 1 <( currentData [4] $end
$var wire 1 =( currentData [3] $end
$var wire 1 >( currentData [2] $end
$var wire 1 ?( currentData [1] $end
$var wire 1 @( currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 A( state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 B( state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 C( state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 D( state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 E( state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 F( state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 G( state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 H( state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 9( q $end
$var wire 1 )( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 I( state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 :( q $end
$var wire 1 *( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 J( state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 ;( q $end
$var wire 1 +( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 K( state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 <( q $end
$var wire 1 ,( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 L( state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 =( q $end
$var wire 1 -( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 M( state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 >( q $end
$var wire 1 .( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 N( state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 ?( q $end
$var wire 1 /( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 O( state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 @( q $end
$var wire 1 0( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 P( state $end
$upscope $end
$upscope $end

$scope module iREGISTER_5 $end
$var parameter 32 Q( REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 R( writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 v$ readData [15] $end
$var wire 1 u$ readData [14] $end
$var wire 1 t$ readData [13] $end
$var wire 1 s$ readData [12] $end
$var wire 1 r$ readData [11] $end
$var wire 1 q$ readData [10] $end
$var wire 1 p$ readData [9] $end
$var wire 1 o$ readData [8] $end
$var wire 1 n$ readData [7] $end
$var wire 1 m$ readData [6] $end
$var wire 1 l$ readData [5] $end
$var wire 1 k$ readData [4] $end
$var wire 1 j$ readData [3] $end
$var wire 1 i$ readData [2] $end
$var wire 1 h$ readData [1] $end
$var wire 1 g$ readData [0] $end
$var wire 1 S( newData [15] $end
$var wire 1 T( newData [14] $end
$var wire 1 U( newData [13] $end
$var wire 1 V( newData [12] $end
$var wire 1 W( newData [11] $end
$var wire 1 X( newData [10] $end
$var wire 1 Y( newData [9] $end
$var wire 1 Z( newData [8] $end
$var wire 1 [( newData [7] $end
$var wire 1 \( newData [6] $end
$var wire 1 ]( newData [5] $end
$var wire 1 ^( newData [4] $end
$var wire 1 _( newData [3] $end
$var wire 1 `( newData [2] $end
$var wire 1 a( newData [1] $end
$var wire 1 b( newData [0] $end
$var wire 1 c( currentData [15] $end
$var wire 1 d( currentData [14] $end
$var wire 1 e( currentData [13] $end
$var wire 1 f( currentData [12] $end
$var wire 1 g( currentData [11] $end
$var wire 1 h( currentData [10] $end
$var wire 1 i( currentData [9] $end
$var wire 1 j( currentData [8] $end
$var wire 1 k( currentData [7] $end
$var wire 1 l( currentData [6] $end
$var wire 1 m( currentData [5] $end
$var wire 1 n( currentData [4] $end
$var wire 1 o( currentData [3] $end
$var wire 1 p( currentData [2] $end
$var wire 1 q( currentData [1] $end
$var wire 1 r( currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 c( q $end
$var wire 1 S( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 s( state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 d( q $end
$var wire 1 T( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 t( state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 e( q $end
$var wire 1 U( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 u( state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 f( q $end
$var wire 1 V( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 v( state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 g( q $end
$var wire 1 W( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 w( state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 h( q $end
$var wire 1 X( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 x( state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 i( q $end
$var wire 1 Y( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 y( state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 j( q $end
$var wire 1 Z( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 z( state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 k( q $end
$var wire 1 [( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 {( state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 l( q $end
$var wire 1 \( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 |( state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 m( q $end
$var wire 1 ]( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 }( state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 n( q $end
$var wire 1 ^( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ~( state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 o( q $end
$var wire 1 _( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 !) state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 p( q $end
$var wire 1 `( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ") state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 q( q $end
$var wire 1 a( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 #) state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 r( q $end
$var wire 1 b( d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 $) state $end
$upscope $end
$upscope $end

$scope module iREGISTER_6 $end
$var parameter 32 %) REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 &) writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 f$ readData [15] $end
$var wire 1 e$ readData [14] $end
$var wire 1 d$ readData [13] $end
$var wire 1 c$ readData [12] $end
$var wire 1 b$ readData [11] $end
$var wire 1 a$ readData [10] $end
$var wire 1 `$ readData [9] $end
$var wire 1 _$ readData [8] $end
$var wire 1 ^$ readData [7] $end
$var wire 1 ]$ readData [6] $end
$var wire 1 \$ readData [5] $end
$var wire 1 [$ readData [4] $end
$var wire 1 Z$ readData [3] $end
$var wire 1 Y$ readData [2] $end
$var wire 1 X$ readData [1] $end
$var wire 1 W$ readData [0] $end
$var wire 1 ') newData [15] $end
$var wire 1 () newData [14] $end
$var wire 1 )) newData [13] $end
$var wire 1 *) newData [12] $end
$var wire 1 +) newData [11] $end
$var wire 1 ,) newData [10] $end
$var wire 1 -) newData [9] $end
$var wire 1 .) newData [8] $end
$var wire 1 /) newData [7] $end
$var wire 1 0) newData [6] $end
$var wire 1 1) newData [5] $end
$var wire 1 2) newData [4] $end
$var wire 1 3) newData [3] $end
$var wire 1 4) newData [2] $end
$var wire 1 5) newData [1] $end
$var wire 1 6) newData [0] $end
$var wire 1 7) currentData [15] $end
$var wire 1 8) currentData [14] $end
$var wire 1 9) currentData [13] $end
$var wire 1 :) currentData [12] $end
$var wire 1 ;) currentData [11] $end
$var wire 1 <) currentData [10] $end
$var wire 1 =) currentData [9] $end
$var wire 1 >) currentData [8] $end
$var wire 1 ?) currentData [7] $end
$var wire 1 @) currentData [6] $end
$var wire 1 A) currentData [5] $end
$var wire 1 B) currentData [4] $end
$var wire 1 C) currentData [3] $end
$var wire 1 D) currentData [2] $end
$var wire 1 E) currentData [1] $end
$var wire 1 F) currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 7) q $end
$var wire 1 ') d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 G) state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 8) q $end
$var wire 1 () d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 H) state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 9) q $end
$var wire 1 )) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 I) state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 :) q $end
$var wire 1 *) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 J) state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 ;) q $end
$var wire 1 +) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 K) state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 <) q $end
$var wire 1 ,) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 L) state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 =) q $end
$var wire 1 -) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 M) state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 >) q $end
$var wire 1 .) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 N) state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 ?) q $end
$var wire 1 /) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 O) state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 @) q $end
$var wire 1 0) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 P) state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 A) q $end
$var wire 1 1) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 Q) state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 B) q $end
$var wire 1 2) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 R) state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 C) q $end
$var wire 1 3) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 S) state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 D) q $end
$var wire 1 4) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 T) state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 E) q $end
$var wire 1 5) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 U) state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 F) q $end
$var wire 1 6) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 V) state $end
$upscope $end
$upscope $end

$scope module iREGISTER_7 $end
$var parameter 32 W) REGISTER_WIDTH $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 X) writeEn $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$var wire 1 V$ readData [15] $end
$var wire 1 U$ readData [14] $end
$var wire 1 T$ readData [13] $end
$var wire 1 S$ readData [12] $end
$var wire 1 R$ readData [11] $end
$var wire 1 Q$ readData [10] $end
$var wire 1 P$ readData [9] $end
$var wire 1 O$ readData [8] $end
$var wire 1 N$ readData [7] $end
$var wire 1 M$ readData [6] $end
$var wire 1 L$ readData [5] $end
$var wire 1 K$ readData [4] $end
$var wire 1 J$ readData [3] $end
$var wire 1 I$ readData [2] $end
$var wire 1 H$ readData [1] $end
$var wire 1 G$ readData [0] $end
$var wire 1 Y) newData [15] $end
$var wire 1 Z) newData [14] $end
$var wire 1 [) newData [13] $end
$var wire 1 \) newData [12] $end
$var wire 1 ]) newData [11] $end
$var wire 1 ^) newData [10] $end
$var wire 1 _) newData [9] $end
$var wire 1 `) newData [8] $end
$var wire 1 a) newData [7] $end
$var wire 1 b) newData [6] $end
$var wire 1 c) newData [5] $end
$var wire 1 d) newData [4] $end
$var wire 1 e) newData [3] $end
$var wire 1 f) newData [2] $end
$var wire 1 g) newData [1] $end
$var wire 1 h) newData [0] $end
$var wire 1 i) currentData [15] $end
$var wire 1 j) currentData [14] $end
$var wire 1 k) currentData [13] $end
$var wire 1 l) currentData [12] $end
$var wire 1 m) currentData [11] $end
$var wire 1 n) currentData [10] $end
$var wire 1 o) currentData [9] $end
$var wire 1 p) currentData [8] $end
$var wire 1 q) currentData [7] $end
$var wire 1 r) currentData [6] $end
$var wire 1 s) currentData [5] $end
$var wire 1 t) currentData [4] $end
$var wire 1 u) currentData [3] $end
$var wire 1 v) currentData [2] $end
$var wire 1 w) currentData [1] $end
$var wire 1 x) currentData [0] $end

$scope module iDFF[15] $end
$var wire 1 i) q $end
$var wire 1 Y) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 y) state $end
$upscope $end

$scope module iDFF[14] $end
$var wire 1 j) q $end
$var wire 1 Z) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 z) state $end
$upscope $end

$scope module iDFF[13] $end
$var wire 1 k) q $end
$var wire 1 [) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 {) state $end
$upscope $end

$scope module iDFF[12] $end
$var wire 1 l) q $end
$var wire 1 \) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 |) state $end
$upscope $end

$scope module iDFF[11] $end
$var wire 1 m) q $end
$var wire 1 ]) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 }) state $end
$upscope $end

$scope module iDFF[10] $end
$var wire 1 n) q $end
$var wire 1 ^) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ~) state $end
$upscope $end

$scope module iDFF[9] $end
$var wire 1 o) q $end
$var wire 1 _) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 !* state $end
$upscope $end

$scope module iDFF[8] $end
$var wire 1 p) q $end
$var wire 1 `) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 "* state $end
$upscope $end

$scope module iDFF[7] $end
$var wire 1 q) q $end
$var wire 1 a) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 #* state $end
$upscope $end

$scope module iDFF[6] $end
$var wire 1 r) q $end
$var wire 1 b) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 $* state $end
$upscope $end

$scope module iDFF[5] $end
$var wire 1 s) q $end
$var wire 1 c) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 %* state $end
$upscope $end

$scope module iDFF[4] $end
$var wire 1 t) q $end
$var wire 1 d) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 &* state $end
$upscope $end

$scope module iDFF[3] $end
$var wire 1 u) q $end
$var wire 1 e) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 '* state $end
$upscope $end

$scope module iDFF[2] $end
$var wire 1 v) q $end
$var wire 1 f) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 (* state $end
$upscope $end

$scope module iDFF[1] $end
$var wire 1 w) q $end
$var wire 1 g) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 )* state $end
$upscope $end

$scope module iDFF[0] $end
$var wire 1 x) q $end
$var wire 1 h) d $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ** state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module iEXTENSION0 $end
$var wire 1 /! imm_5 [4] $end
$var wire 1 0! imm_5 [3] $end
$var wire 1 1! imm_5 [2] $end
$var wire 1 2! imm_5 [1] $end
$var wire 1 3! imm_5 [0] $end
$var wire 1 ,! imm_8 [7] $end
$var wire 1 -! imm_8 [6] $end
$var wire 1 .! imm_8 [5] $end
$var wire 1 /! imm_8 [4] $end
$var wire 1 0! imm_8 [3] $end
$var wire 1 1! imm_8 [2] $end
$var wire 1 2! imm_8 [1] $end
$var wire 1 3! imm_8 [0] $end
$var wire 1 )! imm_11 [10] $end
$var wire 1 *! imm_11 [9] $end
$var wire 1 +! imm_11 [8] $end
$var wire 1 ,! imm_11 [7] $end
$var wire 1 -! imm_11 [6] $end
$var wire 1 .! imm_11 [5] $end
$var wire 1 /! imm_11 [4] $end
$var wire 1 0! imm_11 [3] $end
$var wire 1 1! imm_11 [2] $end
$var wire 1 2! imm_11 [1] $end
$var wire 1 3! imm_11 [0] $end
$var wire 1 @" immExtSel [2] $end
$var wire 1 A" immExtSel [1] $end
$var wire 1 B" immExtSel [0] $end
$var wire 1 h! immExt [15] $end
$var wire 1 i! immExt [14] $end
$var wire 1 j! immExt [13] $end
$var wire 1 k! immExt [12] $end
$var wire 1 l! immExt [11] $end
$var wire 1 m! immExt [10] $end
$var wire 1 n! immExt [9] $end
$var wire 1 o! immExt [8] $end
$var wire 1 p! immExt [7] $end
$var wire 1 q! immExt [6] $end
$var wire 1 r! immExt [5] $end
$var wire 1 s! immExt [4] $end
$var wire 1 t! immExt [3] $end
$var wire 1 u! immExt [2] $end
$var wire 1 v! immExt [1] $end
$var wire 1 w! immExt [0] $end
$var wire 1 +* zero_imm_5 [15] $end
$var wire 1 ,* zero_imm_5 [14] $end
$var wire 1 -* zero_imm_5 [13] $end
$var wire 1 .* zero_imm_5 [12] $end
$var wire 1 /* zero_imm_5 [11] $end
$var wire 1 0* zero_imm_5 [10] $end
$var wire 1 1* zero_imm_5 [9] $end
$var wire 1 2* zero_imm_5 [8] $end
$var wire 1 3* zero_imm_5 [7] $end
$var wire 1 4* zero_imm_5 [6] $end
$var wire 1 5* zero_imm_5 [5] $end
$var wire 1 6* zero_imm_5 [4] $end
$var wire 1 7* zero_imm_5 [3] $end
$var wire 1 8* zero_imm_5 [2] $end
$var wire 1 9* zero_imm_5 [1] $end
$var wire 1 :* zero_imm_5 [0] $end
$var wire 1 ;* signed_imm_5 [15] $end
$var wire 1 <* signed_imm_5 [14] $end
$var wire 1 =* signed_imm_5 [13] $end
$var wire 1 >* signed_imm_5 [12] $end
$var wire 1 ?* signed_imm_5 [11] $end
$var wire 1 @* signed_imm_5 [10] $end
$var wire 1 A* signed_imm_5 [9] $end
$var wire 1 B* signed_imm_5 [8] $end
$var wire 1 C* signed_imm_5 [7] $end
$var wire 1 D* signed_imm_5 [6] $end
$var wire 1 E* signed_imm_5 [5] $end
$var wire 1 F* signed_imm_5 [4] $end
$var wire 1 G* signed_imm_5 [3] $end
$var wire 1 H* signed_imm_5 [2] $end
$var wire 1 I* signed_imm_5 [1] $end
$var wire 1 J* signed_imm_5 [0] $end
$var wire 1 K* zero_imm_8 [15] $end
$var wire 1 L* zero_imm_8 [14] $end
$var wire 1 M* zero_imm_8 [13] $end
$var wire 1 N* zero_imm_8 [12] $end
$var wire 1 O* zero_imm_8 [11] $end
$var wire 1 P* zero_imm_8 [10] $end
$var wire 1 Q* zero_imm_8 [9] $end
$var wire 1 R* zero_imm_8 [8] $end
$var wire 1 S* zero_imm_8 [7] $end
$var wire 1 T* zero_imm_8 [6] $end
$var wire 1 U* zero_imm_8 [5] $end
$var wire 1 V* zero_imm_8 [4] $end
$var wire 1 W* zero_imm_8 [3] $end
$var wire 1 X* zero_imm_8 [2] $end
$var wire 1 Y* zero_imm_8 [1] $end
$var wire 1 Z* zero_imm_8 [0] $end
$var wire 1 [* signed_imm_8 [15] $end
$var wire 1 \* signed_imm_8 [14] $end
$var wire 1 ]* signed_imm_8 [13] $end
$var wire 1 ^* signed_imm_8 [12] $end
$var wire 1 _* signed_imm_8 [11] $end
$var wire 1 `* signed_imm_8 [10] $end
$var wire 1 a* signed_imm_8 [9] $end
$var wire 1 b* signed_imm_8 [8] $end
$var wire 1 c* signed_imm_8 [7] $end
$var wire 1 d* signed_imm_8 [6] $end
$var wire 1 e* signed_imm_8 [5] $end
$var wire 1 f* signed_imm_8 [4] $end
$var wire 1 g* signed_imm_8 [3] $end
$var wire 1 h* signed_imm_8 [2] $end
$var wire 1 i* signed_imm_8 [1] $end
$var wire 1 j* signed_imm_8 [0] $end
$var wire 1 k* signed_imm_11 [15] $end
$var wire 1 l* signed_imm_11 [14] $end
$var wire 1 m* signed_imm_11 [13] $end
$var wire 1 n* signed_imm_11 [12] $end
$var wire 1 o* signed_imm_11 [11] $end
$var wire 1 p* signed_imm_11 [10] $end
$var wire 1 q* signed_imm_11 [9] $end
$var wire 1 r* signed_imm_11 [8] $end
$var wire 1 s* signed_imm_11 [7] $end
$var wire 1 t* signed_imm_11 [6] $end
$var wire 1 u* signed_imm_11 [5] $end
$var wire 1 v* signed_imm_11 [4] $end
$var wire 1 w* signed_imm_11 [3] $end
$var wire 1 x* signed_imm_11 [2] $end
$var wire 1 y* signed_imm_11 [1] $end
$var wire 1 z* signed_imm_11 [0] $end
$upscope $end
$upscope $end

$scope module iCONTROL_ALU0 $end
$var wire 1 $! opcode [4] $end
$var wire 1 %! opcode [3] $end
$var wire 1 &! opcode [2] $end
$var wire 1 '! opcode [1] $end
$var wire 1 (! opcode [0] $end
$var wire 1 2! extension [1] $end
$var wire 1 3! extension [0] $end
$var wire 1 x! aluOp [3] $end
$var wire 1 y! aluOp [2] $end
$var wire 1 z! aluOp [1] $end
$var wire 1 {! aluOp [0] $end
$upscope $end

$scope module iEXECUTE0 $end
$var wire 1 G! read1Data [15] $end
$var wire 1 H! read1Data [14] $end
$var wire 1 I! read1Data [13] $end
$var wire 1 J! read1Data [12] $end
$var wire 1 K! read1Data [11] $end
$var wire 1 L! read1Data [10] $end
$var wire 1 M! read1Data [9] $end
$var wire 1 N! read1Data [8] $end
$var wire 1 O! read1Data [7] $end
$var wire 1 P! read1Data [6] $end
$var wire 1 Q! read1Data [5] $end
$var wire 1 R! read1Data [4] $end
$var wire 1 S! read1Data [3] $end
$var wire 1 T! read1Data [2] $end
$var wire 1 U! read1Data [1] $end
$var wire 1 V! read1Data [0] $end
$var wire 1 W! read2Data [15] $end
$var wire 1 X! read2Data [14] $end
$var wire 1 Y! read2Data [13] $end
$var wire 1 Z! read2Data [12] $end
$var wire 1 [! read2Data [11] $end
$var wire 1 \! read2Data [10] $end
$var wire 1 ]! read2Data [9] $end
$var wire 1 ^! read2Data [8] $end
$var wire 1 _! read2Data [7] $end
$var wire 1 `! read2Data [6] $end
$var wire 1 a! read2Data [5] $end
$var wire 1 b! read2Data [4] $end
$var wire 1 c! read2Data [3] $end
$var wire 1 d! read2Data [2] $end
$var wire 1 e! read2Data [1] $end
$var wire 1 f! read2Data [0] $end
$var wire 1 x! aluOp [3] $end
$var wire 1 y! aluOp [2] $end
$var wire 1 z! aluOp [1] $end
$var wire 1 {! aluOp [0] $end
$var wire 1 5" aluSrc $end
$var wire 1 h! immExt [15] $end
$var wire 1 i! immExt [14] $end
$var wire 1 j! immExt [13] $end
$var wire 1 k! immExt [12] $end
$var wire 1 l! immExt [11] $end
$var wire 1 m! immExt [10] $end
$var wire 1 n! immExt [9] $end
$var wire 1 o! immExt [8] $end
$var wire 1 p! immExt [7] $end
$var wire 1 q! immExt [6] $end
$var wire 1 r! immExt [5] $end
$var wire 1 s! immExt [4] $end
$var wire 1 t! immExt [3] $end
$var wire 1 u! immExt [2] $end
$var wire 1 v! immExt [1] $end
$var wire 1 w! immExt [0] $end
$var wire 1 G" aluOut [15] $end
$var wire 1 H" aluOut [14] $end
$var wire 1 I" aluOut [13] $end
$var wire 1 J" aluOut [12] $end
$var wire 1 K" aluOut [11] $end
$var wire 1 L" aluOut [10] $end
$var wire 1 M" aluOut [9] $end
$var wire 1 N" aluOut [8] $end
$var wire 1 O" aluOut [7] $end
$var wire 1 P" aluOut [6] $end
$var wire 1 Q" aluOut [5] $end
$var wire 1 R" aluOut [4] $end
$var wire 1 S" aluOut [3] $end
$var wire 1 T" aluOut [2] $end
$var wire 1 U" aluOut [1] $end
$var wire 1 V" aluOut [0] $end
$var wire 1 D" sf $end
$var wire 1 C" zf $end
$var wire 1 E" of $end
$var wire 1 F" cf $end
$var wire 1 {* InB [15] $end
$var wire 1 |* InB [14] $end
$var wire 1 }* InB [13] $end
$var wire 1 ~* InB [12] $end
$var wire 1 !+ InB [11] $end
$var wire 1 "+ InB [10] $end
$var wire 1 #+ InB [9] $end
$var wire 1 $+ InB [8] $end
$var wire 1 %+ InB [7] $end
$var wire 1 &+ InB [6] $end
$var wire 1 '+ InB [5] $end
$var wire 1 (+ InB [4] $end
$var wire 1 )+ InB [3] $end
$var wire 1 *+ InB [2] $end
$var wire 1 ++ InB [1] $end
$var wire 1 ,+ InB [0] $end

$scope module iALU $end
$var parameter 32 -+ OPERAND_WIDTH $end
$var parameter 32 .+ NUM_OPERATIONS $end
$var wire 1 G! InA [15] $end
$var wire 1 H! InA [14] $end
$var wire 1 I! InA [13] $end
$var wire 1 J! InA [12] $end
$var wire 1 K! InA [11] $end
$var wire 1 L! InA [10] $end
$var wire 1 M! InA [9] $end
$var wire 1 N! InA [8] $end
$var wire 1 O! InA [7] $end
$var wire 1 P! InA [6] $end
$var wire 1 Q! InA [5] $end
$var wire 1 R! InA [4] $end
$var wire 1 S! InA [3] $end
$var wire 1 T! InA [2] $end
$var wire 1 U! InA [1] $end
$var wire 1 V! InA [0] $end
$var wire 1 {* InB [15] $end
$var wire 1 |* InB [14] $end
$var wire 1 }* InB [13] $end
$var wire 1 ~* InB [12] $end
$var wire 1 !+ InB [11] $end
$var wire 1 "+ InB [10] $end
$var wire 1 #+ InB [9] $end
$var wire 1 $+ InB [8] $end
$var wire 1 %+ InB [7] $end
$var wire 1 &+ InB [6] $end
$var wire 1 '+ InB [5] $end
$var wire 1 (+ InB [4] $end
$var wire 1 )+ InB [3] $end
$var wire 1 *+ InB [2] $end
$var wire 1 ++ InB [1] $end
$var wire 1 ,+ InB [0] $end
$var wire 1 x! Oper [3] $end
$var wire 1 y! Oper [2] $end
$var wire 1 z! Oper [1] $end
$var wire 1 {! Oper [0] $end
$var wire 1 G" Out [15] $end
$var wire 1 H" Out [14] $end
$var wire 1 I" Out [13] $end
$var wire 1 J" Out [12] $end
$var wire 1 K" Out [11] $end
$var wire 1 L" Out [10] $end
$var wire 1 M" Out [9] $end
$var wire 1 N" Out [8] $end
$var wire 1 O" Out [7] $end
$var wire 1 P" Out [6] $end
$var wire 1 Q" Out [5] $end
$var wire 1 R" Out [4] $end
$var wire 1 S" Out [3] $end
$var wire 1 T" Out [2] $end
$var wire 1 U" Out [1] $end
$var wire 1 V" Out [0] $end
$var wire 1 E" of $end
$var wire 1 D" sf $end
$var wire 1 C" zf $end
$var wire 1 F" cf $end
$var wire 1 /+ A_int [15] $end
$var wire 1 0+ A_int [14] $end
$var wire 1 1+ A_int [13] $end
$var wire 1 2+ A_int [12] $end
$var wire 1 3+ A_int [11] $end
$var wire 1 4+ A_int [10] $end
$var wire 1 5+ A_int [9] $end
$var wire 1 6+ A_int [8] $end
$var wire 1 7+ A_int [7] $end
$var wire 1 8+ A_int [6] $end
$var wire 1 9+ A_int [5] $end
$var wire 1 :+ A_int [4] $end
$var wire 1 ;+ A_int [3] $end
$var wire 1 <+ A_int [2] $end
$var wire 1 =+ A_int [1] $end
$var wire 1 >+ A_int [0] $end
$var wire 1 ?+ B_int [15] $end
$var wire 1 @+ B_int [14] $end
$var wire 1 A+ B_int [13] $end
$var wire 1 B+ B_int [12] $end
$var wire 1 C+ B_int [11] $end
$var wire 1 D+ B_int [10] $end
$var wire 1 E+ B_int [9] $end
$var wire 1 F+ B_int [8] $end
$var wire 1 G+ B_int [7] $end
$var wire 1 H+ B_int [6] $end
$var wire 1 I+ B_int [5] $end
$var wire 1 J+ B_int [4] $end
$var wire 1 K+ B_int [3] $end
$var wire 1 L+ B_int [2] $end
$var wire 1 M+ B_int [1] $end
$var wire 1 N+ B_int [0] $end
$var wire 1 O+ shift_result [15] $end
$var wire 1 P+ shift_result [14] $end
$var wire 1 Q+ shift_result [13] $end
$var wire 1 R+ shift_result [12] $end
$var wire 1 S+ shift_result [11] $end
$var wire 1 T+ shift_result [10] $end
$var wire 1 U+ shift_result [9] $end
$var wire 1 V+ shift_result [8] $end
$var wire 1 W+ shift_result [7] $end
$var wire 1 X+ shift_result [6] $end
$var wire 1 Y+ shift_result [5] $end
$var wire 1 Z+ shift_result [4] $end
$var wire 1 [+ shift_result [3] $end
$var wire 1 \+ shift_result [2] $end
$var wire 1 ]+ shift_result [1] $end
$var wire 1 ^+ shift_result [0] $end
$var wire 1 _+ sum [15] $end
$var wire 1 `+ sum [14] $end
$var wire 1 a+ sum [13] $end
$var wire 1 b+ sum [12] $end
$var wire 1 c+ sum [11] $end
$var wire 1 d+ sum [10] $end
$var wire 1 e+ sum [9] $end
$var wire 1 f+ sum [8] $end
$var wire 1 g+ sum [7] $end
$var wire 1 h+ sum [6] $end
$var wire 1 i+ sum [5] $end
$var wire 1 j+ sum [4] $end
$var wire 1 k+ sum [3] $end
$var wire 1 l+ sum [2] $end
$var wire 1 m+ sum [1] $end
$var wire 1 n+ sum [0] $end
$var wire 1 o+ xor_result [15] $end
$var wire 1 p+ xor_result [14] $end
$var wire 1 q+ xor_result [13] $end
$var wire 1 r+ xor_result [12] $end
$var wire 1 s+ xor_result [11] $end
$var wire 1 t+ xor_result [10] $end
$var wire 1 u+ xor_result [9] $end
$var wire 1 v+ xor_result [8] $end
$var wire 1 w+ xor_result [7] $end
$var wire 1 x+ xor_result [6] $end
$var wire 1 y+ xor_result [5] $end
$var wire 1 z+ xor_result [4] $end
$var wire 1 {+ xor_result [3] $end
$var wire 1 |+ xor_result [2] $end
$var wire 1 }+ xor_result [1] $end
$var wire 1 ~+ xor_result [0] $end
$var wire 1 !, andn_result [15] $end
$var wire 1 ", andn_result [14] $end
$var wire 1 #, andn_result [13] $end
$var wire 1 $, andn_result [12] $end
$var wire 1 %, andn_result [11] $end
$var wire 1 &, andn_result [10] $end
$var wire 1 ', andn_result [9] $end
$var wire 1 (, andn_result [8] $end
$var wire 1 ), andn_result [7] $end
$var wire 1 *, andn_result [6] $end
$var wire 1 +, andn_result [5] $end
$var wire 1 ,, andn_result [4] $end
$var wire 1 -, andn_result [3] $end
$var wire 1 ., andn_result [2] $end
$var wire 1 /, andn_result [1] $end
$var wire 1 0, andn_result [0] $end
$var wire 1 1, ShAmt [3] $end
$var wire 1 2, ShAmt [2] $end
$var wire 1 3, ShAmt [1] $end
$var wire 1 4, ShAmt [0] $end
$var wire 1 5, Cin $end
$var wire 1 6, sign $end
$var wire 1 7, Ofl $end
$var wire 1 8, brt $end

$scope module iSHIFTER $end
$var parameter 32 9, OPERAND_WIDTH $end
$var parameter 32 :, SHAMT_WIDTH $end
$var parameter 32 ;, NUM_OPERATIONS $end
$var wire 1 /+ In [15] $end
$var wire 1 0+ In [14] $end
$var wire 1 1+ In [13] $end
$var wire 1 2+ In [12] $end
$var wire 1 3+ In [11] $end
$var wire 1 4+ In [10] $end
$var wire 1 5+ In [9] $end
$var wire 1 6+ In [8] $end
$var wire 1 7+ In [7] $end
$var wire 1 8+ In [6] $end
$var wire 1 9+ In [5] $end
$var wire 1 :+ In [4] $end
$var wire 1 ;+ In [3] $end
$var wire 1 <+ In [2] $end
$var wire 1 =+ In [1] $end
$var wire 1 >+ In [0] $end
$var wire 1 1, ShAmt [3] $end
$var wire 1 2, ShAmt [2] $end
$var wire 1 3, ShAmt [1] $end
$var wire 1 4, ShAmt [0] $end
$var wire 1 z! Oper [1] $end
$var wire 1 {! Oper [0] $end
$var wire 1 O+ Out [15] $end
$var wire 1 P+ Out [14] $end
$var wire 1 Q+ Out [13] $end
$var wire 1 R+ Out [12] $end
$var wire 1 S+ Out [11] $end
$var wire 1 T+ Out [10] $end
$var wire 1 U+ Out [9] $end
$var wire 1 V+ Out [8] $end
$var wire 1 W+ Out [7] $end
$var wire 1 X+ Out [6] $end
$var wire 1 Y+ Out [5] $end
$var wire 1 Z+ Out [4] $end
$var wire 1 [+ Out [3] $end
$var wire 1 \+ Out [2] $end
$var wire 1 ]+ Out [1] $end
$var wire 1 ^+ Out [0] $end
$var wire 1 <, left_shift_rot_result [15] $end
$var wire 1 =, left_shift_rot_result [14] $end
$var wire 1 >, left_shift_rot_result [13] $end
$var wire 1 ?, left_shift_rot_result [12] $end
$var wire 1 @, left_shift_rot_result [11] $end
$var wire 1 A, left_shift_rot_result [10] $end
$var wire 1 B, left_shift_rot_result [9] $end
$var wire 1 C, left_shift_rot_result [8] $end
$var wire 1 D, left_shift_rot_result [7] $end
$var wire 1 E, left_shift_rot_result [6] $end
$var wire 1 F, left_shift_rot_result [5] $end
$var wire 1 G, left_shift_rot_result [4] $end
$var wire 1 H, left_shift_rot_result [3] $end
$var wire 1 I, left_shift_rot_result [2] $end
$var wire 1 J, left_shift_rot_result [1] $end
$var wire 1 K, left_shift_rot_result [0] $end
$var wire 1 L, shift_right_rot_log_result [15] $end
$var wire 1 M, shift_right_rot_log_result [14] $end
$var wire 1 N, shift_right_rot_log_result [13] $end
$var wire 1 O, shift_right_rot_log_result [12] $end
$var wire 1 P, shift_right_rot_log_result [11] $end
$var wire 1 Q, shift_right_rot_log_result [10] $end
$var wire 1 R, shift_right_rot_log_result [9] $end
$var wire 1 S, shift_right_rot_log_result [8] $end
$var wire 1 T, shift_right_rot_log_result [7] $end
$var wire 1 U, shift_right_rot_log_result [6] $end
$var wire 1 V, shift_right_rot_log_result [5] $end
$var wire 1 W, shift_right_rot_log_result [4] $end
$var wire 1 X, shift_right_rot_log_result [3] $end
$var wire 1 Y, shift_right_rot_log_result [2] $end
$var wire 1 Z, shift_right_rot_log_result [1] $end
$var wire 1 [, shift_right_rot_log_result [0] $end

$scope module iLSR $end
$var wire 1 /+ In [15] $end
$var wire 1 0+ In [14] $end
$var wire 1 1+ In [13] $end
$var wire 1 2+ In [12] $end
$var wire 1 3+ In [11] $end
$var wire 1 4+ In [10] $end
$var wire 1 5+ In [9] $end
$var wire 1 6+ In [8] $end
$var wire 1 7+ In [7] $end
$var wire 1 8+ In [6] $end
$var wire 1 9+ In [5] $end
$var wire 1 :+ In [4] $end
$var wire 1 ;+ In [3] $end
$var wire 1 <+ In [2] $end
$var wire 1 =+ In [1] $end
$var wire 1 >+ In [0] $end
$var wire 1 1, ShAmt [3] $end
$var wire 1 2, ShAmt [2] $end
$var wire 1 3, ShAmt [1] $end
$var wire 1 4, ShAmt [0] $end
$var wire 1 \, Rot $end
$var wire 1 <, Out [15] $end
$var wire 1 =, Out [14] $end
$var wire 1 >, Out [13] $end
$var wire 1 ?, Out [12] $end
$var wire 1 @, Out [11] $end
$var wire 1 A, Out [10] $end
$var wire 1 B, Out [9] $end
$var wire 1 C, Out [8] $end
$var wire 1 D, Out [7] $end
$var wire 1 E, Out [6] $end
$var wire 1 F, Out [5] $end
$var wire 1 G, Out [4] $end
$var wire 1 H, Out [3] $end
$var wire 1 I, Out [2] $end
$var wire 1 J, Out [1] $end
$var wire 1 K, Out [0] $end
$var wire 1 ], stage1 [15] $end
$var wire 1 ^, stage1 [14] $end
$var wire 1 _, stage1 [13] $end
$var wire 1 `, stage1 [12] $end
$var wire 1 a, stage1 [11] $end
$var wire 1 b, stage1 [10] $end
$var wire 1 c, stage1 [9] $end
$var wire 1 d, stage1 [8] $end
$var wire 1 e, stage1 [7] $end
$var wire 1 f, stage1 [6] $end
$var wire 1 g, stage1 [5] $end
$var wire 1 h, stage1 [4] $end
$var wire 1 i, stage1 [3] $end
$var wire 1 j, stage1 [2] $end
$var wire 1 k, stage1 [1] $end
$var wire 1 l, stage1 [0] $end
$var wire 1 m, stage2 [15] $end
$var wire 1 n, stage2 [14] $end
$var wire 1 o, stage2 [13] $end
$var wire 1 p, stage2 [12] $end
$var wire 1 q, stage2 [11] $end
$var wire 1 r, stage2 [10] $end
$var wire 1 s, stage2 [9] $end
$var wire 1 t, stage2 [8] $end
$var wire 1 u, stage2 [7] $end
$var wire 1 v, stage2 [6] $end
$var wire 1 w, stage2 [5] $end
$var wire 1 x, stage2 [4] $end
$var wire 1 y, stage2 [3] $end
$var wire 1 z, stage2 [2] $end
$var wire 1 {, stage2 [1] $end
$var wire 1 |, stage2 [0] $end
$var wire 1 }, stage3 [15] $end
$var wire 1 ~, stage3 [14] $end
$var wire 1 !- stage3 [13] $end
$var wire 1 "- stage3 [12] $end
$var wire 1 #- stage3 [11] $end
$var wire 1 $- stage3 [10] $end
$var wire 1 %- stage3 [9] $end
$var wire 1 &- stage3 [8] $end
$var wire 1 '- stage3 [7] $end
$var wire 1 (- stage3 [6] $end
$var wire 1 )- stage3 [5] $end
$var wire 1 *- stage3 [4] $end
$var wire 1 +- stage3 [3] $end
$var wire 1 ,- stage3 [2] $end
$var wire 1 -- stage3 [1] $end
$var wire 1 .- stage3 [0] $end
$upscope $end

$scope module iRSAL $end
$var wire 1 /+ In [15] $end
$var wire 1 0+ In [14] $end
$var wire 1 1+ In [13] $end
$var wire 1 2+ In [12] $end
$var wire 1 3+ In [11] $end
$var wire 1 4+ In [10] $end
$var wire 1 5+ In [9] $end
$var wire 1 6+ In [8] $end
$var wire 1 7+ In [7] $end
$var wire 1 8+ In [6] $end
$var wire 1 9+ In [5] $end
$var wire 1 :+ In [4] $end
$var wire 1 ;+ In [3] $end
$var wire 1 <+ In [2] $end
$var wire 1 =+ In [1] $end
$var wire 1 >+ In [0] $end
$var wire 1 1, ShAmt [3] $end
$var wire 1 2, ShAmt [2] $end
$var wire 1 3, ShAmt [1] $end
$var wire 1 4, ShAmt [0] $end
$var wire 1 /- Rot $end
$var wire 1 L, Out [15] $end
$var wire 1 M, Out [14] $end
$var wire 1 N, Out [13] $end
$var wire 1 O, Out [12] $end
$var wire 1 P, Out [11] $end
$var wire 1 Q, Out [10] $end
$var wire 1 R, Out [9] $end
$var wire 1 S, Out [8] $end
$var wire 1 T, Out [7] $end
$var wire 1 U, Out [6] $end
$var wire 1 V, Out [5] $end
$var wire 1 W, Out [4] $end
$var wire 1 X, Out [3] $end
$var wire 1 Y, Out [2] $end
$var wire 1 Z, Out [1] $end
$var wire 1 [, Out [0] $end
$var wire 1 0- stage1 [15] $end
$var wire 1 1- stage1 [14] $end
$var wire 1 2- stage1 [13] $end
$var wire 1 3- stage1 [12] $end
$var wire 1 4- stage1 [11] $end
$var wire 1 5- stage1 [10] $end
$var wire 1 6- stage1 [9] $end
$var wire 1 7- stage1 [8] $end
$var wire 1 8- stage1 [7] $end
$var wire 1 9- stage1 [6] $end
$var wire 1 :- stage1 [5] $end
$var wire 1 ;- stage1 [4] $end
$var wire 1 <- stage1 [3] $end
$var wire 1 =- stage1 [2] $end
$var wire 1 >- stage1 [1] $end
$var wire 1 ?- stage1 [0] $end
$var wire 1 @- stage2 [15] $end
$var wire 1 A- stage2 [14] $end
$var wire 1 B- stage2 [13] $end
$var wire 1 C- stage2 [12] $end
$var wire 1 D- stage2 [11] $end
$var wire 1 E- stage2 [10] $end
$var wire 1 F- stage2 [9] $end
$var wire 1 G- stage2 [8] $end
$var wire 1 H- stage2 [7] $end
$var wire 1 I- stage2 [6] $end
$var wire 1 J- stage2 [5] $end
$var wire 1 K- stage2 [4] $end
$var wire 1 L- stage2 [3] $end
$var wire 1 M- stage2 [2] $end
$var wire 1 N- stage2 [1] $end
$var wire 1 O- stage2 [0] $end
$var wire 1 P- stage3 [15] $end
$var wire 1 Q- stage3 [14] $end
$var wire 1 R- stage3 [13] $end
$var wire 1 S- stage3 [12] $end
$var wire 1 T- stage3 [11] $end
$var wire 1 U- stage3 [10] $end
$var wire 1 V- stage3 [9] $end
$var wire 1 W- stage3 [8] $end
$var wire 1 X- stage3 [7] $end
$var wire 1 Y- stage3 [6] $end
$var wire 1 Z- stage3 [5] $end
$var wire 1 [- stage3 [4] $end
$var wire 1 \- stage3 [3] $end
$var wire 1 ]- stage3 [2] $end
$var wire 1 ^- stage3 [1] $end
$var wire 1 _- stage3 [0] $end
$upscope $end
$upscope $end

$scope module iCLA_16b $end
$var parameter 32 `- N $end
$var wire 1 _+ sum [15] $end
$var wire 1 `+ sum [14] $end
$var wire 1 a+ sum [13] $end
$var wire 1 b+ sum [12] $end
$var wire 1 c+ sum [11] $end
$var wire 1 d+ sum [10] $end
$var wire 1 e+ sum [9] $end
$var wire 1 f+ sum [8] $end
$var wire 1 g+ sum [7] $end
$var wire 1 h+ sum [6] $end
$var wire 1 i+ sum [5] $end
$var wire 1 j+ sum [4] $end
$var wire 1 k+ sum [3] $end
$var wire 1 l+ sum [2] $end
$var wire 1 m+ sum [1] $end
$var wire 1 n+ sum [0] $end
$var wire 1 F" c_out $end
$var wire 1 /+ a [15] $end
$var wire 1 0+ a [14] $end
$var wire 1 1+ a [13] $end
$var wire 1 2+ a [12] $end
$var wire 1 3+ a [11] $end
$var wire 1 4+ a [10] $end
$var wire 1 5+ a [9] $end
$var wire 1 6+ a [8] $end
$var wire 1 7+ a [7] $end
$var wire 1 8+ a [6] $end
$var wire 1 9+ a [5] $end
$var wire 1 :+ a [4] $end
$var wire 1 ;+ a [3] $end
$var wire 1 <+ a [2] $end
$var wire 1 =+ a [1] $end
$var wire 1 >+ a [0] $end
$var wire 1 ?+ b [15] $end
$var wire 1 @+ b [14] $end
$var wire 1 A+ b [13] $end
$var wire 1 B+ b [12] $end
$var wire 1 C+ b [11] $end
$var wire 1 D+ b [10] $end
$var wire 1 E+ b [9] $end
$var wire 1 F+ b [8] $end
$var wire 1 G+ b [7] $end
$var wire 1 H+ b [6] $end
$var wire 1 I+ b [5] $end
$var wire 1 J+ b [4] $end
$var wire 1 K+ b [3] $end
$var wire 1 L+ b [2] $end
$var wire 1 M+ b [1] $end
$var wire 1 N+ b [0] $end
$var wire 1 5, c_in $end
$var wire 1 a- c_4b [3] $end
$var wire 1 b- c_4b [2] $end
$var wire 1 c- c_4b [1] $end
$var wire 1 d- c_1b [11] $end
$var wire 1 e- c_1b [10] $end
$var wire 1 f- c_1b [9] $end
$var wire 1 g- c_1b [8] $end
$var wire 1 h- c_1b [7] $end
$var wire 1 i- c_1b [6] $end
$var wire 1 j- c_1b [5] $end
$var wire 1 k- c_1b [4] $end
$var wire 1 l- c_1b [3] $end
$var wire 1 m- c_1b [2] $end
$var wire 1 n- c_1b [1] $end
$var wire 1 o- c_1b [0] $end

$scope module iCLA_4B_0 $end
$var parameter 32 p- N $end
$var wire 1 k+ sum [3] $end
$var wire 1 l+ sum [2] $end
$var wire 1 m+ sum [1] $end
$var wire 1 n+ sum [0] $end
$var wire 1 q- c_out $end
$var wire 1 ;+ a [3] $end
$var wire 1 <+ a [2] $end
$var wire 1 =+ a [1] $end
$var wire 1 >+ a [0] $end
$var wire 1 K+ b [3] $end
$var wire 1 L+ b [2] $end
$var wire 1 M+ b [1] $end
$var wire 1 N+ b [0] $end
$var wire 1 5, c_in $end
$var wire 1 r- g [3] $end
$var wire 1 s- g [2] $end
$var wire 1 t- g [1] $end
$var wire 1 u- g [0] $end
$var wire 1 v- p [3] $end
$var wire 1 w- p [2] $end
$var wire 1 x- p [1] $end
$var wire 1 y- p [0] $end
$var wire 1 z- pc [3] $end
$var wire 1 {- pc [2] $end
$var wire 1 |- pc [1] $end
$var wire 1 }- pc [0] $end
$var wire 1 ~- c [3] $end
$var wire 1 !. c [2] $end
$var wire 1 ". c [1] $end
$var wire 1 #. g_NOT [3] $end
$var wire 1 $. g_NOT [2] $end
$var wire 1 %. g_NOT [1] $end
$var wire 1 &. g_NOT [0] $end
$var wire 1 '. pc_NOT [3] $end
$var wire 1 (. pc_NOT [2] $end
$var wire 1 ). pc_NOT [1] $end
$var wire 1 *. pc_NOT [0] $end
$var wire 1 +. c_NOT [3] $end
$var wire 1 ,. c_NOT [2] $end
$var wire 1 -. c_NOT [1] $end
$var wire 1 .. c_NOT [0] $end

$scope module iFA0 $end
$var wire 1 n+ s $end
$var wire 1 /. c_out $end
$var wire 1 >+ a $end
$var wire 1 N+ b $end
$var wire 1 5, c_in $end
$var wire 1 0. xorAxB $end
$var wire 1 1. nandAxB $end
$var wire 1 2. andAxB $end
$var wire 1 3. nandABxC $end
$var wire 1 4. andABxC $end
$var wire 1 5. c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 0. out $end
$var wire 1 >+ in1 $end
$var wire 1 N+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 1. out $end
$var wire 1 >+ in1 $end
$var wire 1 N+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 2. out $end
$var wire 1 1. in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 n+ out $end
$var wire 1 0. in1 $end
$var wire 1 5, in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 3. out $end
$var wire 1 0. in1 $end
$var wire 1 5, in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 4. out $end
$var wire 1 3. in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 5. out $end
$var wire 1 4. in1 $end
$var wire 1 2. in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 /. out $end
$var wire 1 5. in1 $end
$upscope $end
$upscope $end

$scope module iFA1 $end
$var wire 1 m+ s $end
$var wire 1 6. c_out $end
$var wire 1 =+ a $end
$var wire 1 M+ b $end
$var wire 1 ". c_in $end
$var wire 1 7. xorAxB $end
$var wire 1 8. nandAxB $end
$var wire 1 9. andAxB $end
$var wire 1 :. nandABxC $end
$var wire 1 ;. andABxC $end
$var wire 1 <. c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 7. out $end
$var wire 1 =+ in1 $end
$var wire 1 M+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 8. out $end
$var wire 1 =+ in1 $end
$var wire 1 M+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 9. out $end
$var wire 1 8. in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 m+ out $end
$var wire 1 7. in1 $end
$var wire 1 ". in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 :. out $end
$var wire 1 7. in1 $end
$var wire 1 ". in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 ;. out $end
$var wire 1 :. in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 <. out $end
$var wire 1 ;. in1 $end
$var wire 1 9. in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 6. out $end
$var wire 1 <. in1 $end
$upscope $end
$upscope $end

$scope module iFA2 $end
$var wire 1 l+ s $end
$var wire 1 =. c_out $end
$var wire 1 <+ a $end
$var wire 1 L+ b $end
$var wire 1 !. c_in $end
$var wire 1 >. xorAxB $end
$var wire 1 ?. nandAxB $end
$var wire 1 @. andAxB $end
$var wire 1 A. nandABxC $end
$var wire 1 B. andABxC $end
$var wire 1 C. c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 >. out $end
$var wire 1 <+ in1 $end
$var wire 1 L+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 ?. out $end
$var wire 1 <+ in1 $end
$var wire 1 L+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 @. out $end
$var wire 1 ?. in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 l+ out $end
$var wire 1 >. in1 $end
$var wire 1 !. in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 A. out $end
$var wire 1 >. in1 $end
$var wire 1 !. in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 B. out $end
$var wire 1 A. in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 C. out $end
$var wire 1 B. in1 $end
$var wire 1 @. in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 =. out $end
$var wire 1 C. in1 $end
$upscope $end
$upscope $end

$scope module iFA3 $end
$var wire 1 k+ s $end
$var wire 1 D. c_out $end
$var wire 1 ;+ a $end
$var wire 1 K+ b $end
$var wire 1 ~- c_in $end
$var wire 1 E. xorAxB $end
$var wire 1 F. nandAxB $end
$var wire 1 G. andAxB $end
$var wire 1 H. nandABxC $end
$var wire 1 I. andABxC $end
$var wire 1 J. c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 E. out $end
$var wire 1 ;+ in1 $end
$var wire 1 K+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 F. out $end
$var wire 1 ;+ in1 $end
$var wire 1 K+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 G. out $end
$var wire 1 F. in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 k+ out $end
$var wire 1 E. in1 $end
$var wire 1 ~- in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 H. out $end
$var wire 1 E. in1 $end
$var wire 1 ~- in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 I. out $end
$var wire 1 H. in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 J. out $end
$var wire 1 I. in1 $end
$var wire 1 G. in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 D. out $end
$var wire 1 J. in1 $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_0 $end
$var wire 1 ;+ a [3] $end
$var wire 1 <+ a [2] $end
$var wire 1 =+ a [1] $end
$var wire 1 >+ a [0] $end
$var wire 1 K+ b [3] $end
$var wire 1 L+ b [2] $end
$var wire 1 M+ b [1] $end
$var wire 1 N+ b [0] $end
$var wire 1 5, c_in $end
$var wire 1 ~- c [3] $end
$var wire 1 !. c [2] $end
$var wire 1 ". c [1] $end
$var wire 1 q- c_out $end

$scope module carry_bit_0 $end
$var wire 1 >+ a $end
$var wire 1 N+ b $end
$var wire 1 5, c_in $end
$var wire 1 ". c_out $end
$var wire 1 K. g $end
$var wire 1 L. p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 =+ a $end
$var wire 1 M+ b $end
$var wire 1 ". c_in $end
$var wire 1 !. c_out $end
$var wire 1 M. g $end
$var wire 1 N. p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 <+ a $end
$var wire 1 L+ b $end
$var wire 1 !. c_in $end
$var wire 1 ~- c_out $end
$var wire 1 O. g $end
$var wire 1 P. p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 ;+ a $end
$var wire 1 K+ b $end
$var wire 1 ~- c_in $end
$var wire 1 q- c_out $end
$var wire 1 Q. g $end
$var wire 1 R. p $end
$upscope $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_0 $end
$var wire 1 ;+ a [3] $end
$var wire 1 <+ a [2] $end
$var wire 1 =+ a [1] $end
$var wire 1 >+ a [0] $end
$var wire 1 K+ b [3] $end
$var wire 1 L+ b [2] $end
$var wire 1 M+ b [1] $end
$var wire 1 N+ b [0] $end
$var wire 1 5, c_in $end
$var wire 1 m- c [3] $end
$var wire 1 n- c [2] $end
$var wire 1 o- c [1] $end
$var wire 1 c- c_out $end

$scope module carry_bit_0 $end
$var wire 1 >+ a $end
$var wire 1 N+ b $end
$var wire 1 5, c_in $end
$var wire 1 o- c_out $end
$var wire 1 S. g $end
$var wire 1 T. p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 =+ a $end
$var wire 1 M+ b $end
$var wire 1 o- c_in $end
$var wire 1 n- c_out $end
$var wire 1 U. g $end
$var wire 1 V. p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 <+ a $end
$var wire 1 L+ b $end
$var wire 1 n- c_in $end
$var wire 1 m- c_out $end
$var wire 1 W. g $end
$var wire 1 X. p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 ;+ a $end
$var wire 1 K+ b $end
$var wire 1 m- c_in $end
$var wire 1 c- c_out $end
$var wire 1 Y. g $end
$var wire 1 Z. p $end
$upscope $end
$upscope $end

$scope module iCLA_4B_1 $end
$var parameter 32 [. N $end
$var wire 1 g+ sum [3] $end
$var wire 1 h+ sum [2] $end
$var wire 1 i+ sum [1] $end
$var wire 1 j+ sum [0] $end
$var wire 1 \. c_out $end
$var wire 1 7+ a [3] $end
$var wire 1 8+ a [2] $end
$var wire 1 9+ a [1] $end
$var wire 1 :+ a [0] $end
$var wire 1 G+ b [3] $end
$var wire 1 H+ b [2] $end
$var wire 1 I+ b [1] $end
$var wire 1 J+ b [0] $end
$var wire 1 c- c_in $end
$var wire 1 ]. g [3] $end
$var wire 1 ^. g [2] $end
$var wire 1 _. g [1] $end
$var wire 1 `. g [0] $end
$var wire 1 a. p [3] $end
$var wire 1 b. p [2] $end
$var wire 1 c. p [1] $end
$var wire 1 d. p [0] $end
$var wire 1 e. pc [3] $end
$var wire 1 f. pc [2] $end
$var wire 1 g. pc [1] $end
$var wire 1 h. pc [0] $end
$var wire 1 i. c [3] $end
$var wire 1 j. c [2] $end
$var wire 1 k. c [1] $end
$var wire 1 l. g_NOT [3] $end
$var wire 1 m. g_NOT [2] $end
$var wire 1 n. g_NOT [1] $end
$var wire 1 o. g_NOT [0] $end
$var wire 1 p. pc_NOT [3] $end
$var wire 1 q. pc_NOT [2] $end
$var wire 1 r. pc_NOT [1] $end
$var wire 1 s. pc_NOT [0] $end
$var wire 1 t. c_NOT [3] $end
$var wire 1 u. c_NOT [2] $end
$var wire 1 v. c_NOT [1] $end
$var wire 1 w. c_NOT [0] $end

$scope module iFA0 $end
$var wire 1 j+ s $end
$var wire 1 x. c_out $end
$var wire 1 :+ a $end
$var wire 1 J+ b $end
$var wire 1 c- c_in $end
$var wire 1 y. xorAxB $end
$var wire 1 z. nandAxB $end
$var wire 1 {. andAxB $end
$var wire 1 |. nandABxC $end
$var wire 1 }. andABxC $end
$var wire 1 ~. c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 y. out $end
$var wire 1 :+ in1 $end
$var wire 1 J+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 z. out $end
$var wire 1 :+ in1 $end
$var wire 1 J+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 {. out $end
$var wire 1 z. in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 j+ out $end
$var wire 1 y. in1 $end
$var wire 1 c- in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 |. out $end
$var wire 1 y. in1 $end
$var wire 1 c- in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 }. out $end
$var wire 1 |. in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 ~. out $end
$var wire 1 }. in1 $end
$var wire 1 {. in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 x. out $end
$var wire 1 ~. in1 $end
$upscope $end
$upscope $end

$scope module iFA1 $end
$var wire 1 i+ s $end
$var wire 1 !/ c_out $end
$var wire 1 9+ a $end
$var wire 1 I+ b $end
$var wire 1 k. c_in $end
$var wire 1 "/ xorAxB $end
$var wire 1 #/ nandAxB $end
$var wire 1 $/ andAxB $end
$var wire 1 %/ nandABxC $end
$var wire 1 &/ andABxC $end
$var wire 1 '/ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 "/ out $end
$var wire 1 9+ in1 $end
$var wire 1 I+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 #/ out $end
$var wire 1 9+ in1 $end
$var wire 1 I+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 $/ out $end
$var wire 1 #/ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 i+ out $end
$var wire 1 "/ in1 $end
$var wire 1 k. in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 %/ out $end
$var wire 1 "/ in1 $end
$var wire 1 k. in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 &/ out $end
$var wire 1 %/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 '/ out $end
$var wire 1 &/ in1 $end
$var wire 1 $/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 !/ out $end
$var wire 1 '/ in1 $end
$upscope $end
$upscope $end

$scope module iFA2 $end
$var wire 1 h+ s $end
$var wire 1 (/ c_out $end
$var wire 1 8+ a $end
$var wire 1 H+ b $end
$var wire 1 j. c_in $end
$var wire 1 )/ xorAxB $end
$var wire 1 */ nandAxB $end
$var wire 1 +/ andAxB $end
$var wire 1 ,/ nandABxC $end
$var wire 1 -/ andABxC $end
$var wire 1 ./ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 )/ out $end
$var wire 1 8+ in1 $end
$var wire 1 H+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 */ out $end
$var wire 1 8+ in1 $end
$var wire 1 H+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 +/ out $end
$var wire 1 */ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 h+ out $end
$var wire 1 )/ in1 $end
$var wire 1 j. in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 ,/ out $end
$var wire 1 )/ in1 $end
$var wire 1 j. in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 -/ out $end
$var wire 1 ,/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 ./ out $end
$var wire 1 -/ in1 $end
$var wire 1 +/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 (/ out $end
$var wire 1 ./ in1 $end
$upscope $end
$upscope $end

$scope module iFA3 $end
$var wire 1 g+ s $end
$var wire 1 // c_out $end
$var wire 1 7+ a $end
$var wire 1 G+ b $end
$var wire 1 i. c_in $end
$var wire 1 0/ xorAxB $end
$var wire 1 1/ nandAxB $end
$var wire 1 2/ andAxB $end
$var wire 1 3/ nandABxC $end
$var wire 1 4/ andABxC $end
$var wire 1 5/ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 0/ out $end
$var wire 1 7+ in1 $end
$var wire 1 G+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 1/ out $end
$var wire 1 7+ in1 $end
$var wire 1 G+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 2/ out $end
$var wire 1 1/ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 g+ out $end
$var wire 1 0/ in1 $end
$var wire 1 i. in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 3/ out $end
$var wire 1 0/ in1 $end
$var wire 1 i. in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 4/ out $end
$var wire 1 3/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 5/ out $end
$var wire 1 4/ in1 $end
$var wire 1 2/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 // out $end
$var wire 1 5/ in1 $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_0 $end
$var wire 1 7+ a [3] $end
$var wire 1 8+ a [2] $end
$var wire 1 9+ a [1] $end
$var wire 1 :+ a [0] $end
$var wire 1 G+ b [3] $end
$var wire 1 H+ b [2] $end
$var wire 1 I+ b [1] $end
$var wire 1 J+ b [0] $end
$var wire 1 c- c_in $end
$var wire 1 i. c [3] $end
$var wire 1 j. c [2] $end
$var wire 1 k. c [1] $end
$var wire 1 \. c_out $end

$scope module carry_bit_0 $end
$var wire 1 :+ a $end
$var wire 1 J+ b $end
$var wire 1 c- c_in $end
$var wire 1 k. c_out $end
$var wire 1 6/ g $end
$var wire 1 7/ p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 9+ a $end
$var wire 1 I+ b $end
$var wire 1 k. c_in $end
$var wire 1 j. c_out $end
$var wire 1 8/ g $end
$var wire 1 9/ p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 8+ a $end
$var wire 1 H+ b $end
$var wire 1 j. c_in $end
$var wire 1 i. c_out $end
$var wire 1 :/ g $end
$var wire 1 ;/ p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 7+ a $end
$var wire 1 G+ b $end
$var wire 1 i. c_in $end
$var wire 1 \. c_out $end
$var wire 1 </ g $end
$var wire 1 =/ p $end
$upscope $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_1 $end
$var wire 1 7+ a [3] $end
$var wire 1 8+ a [2] $end
$var wire 1 9+ a [1] $end
$var wire 1 :+ a [0] $end
$var wire 1 G+ b [3] $end
$var wire 1 H+ b [2] $end
$var wire 1 I+ b [1] $end
$var wire 1 J+ b [0] $end
$var wire 1 c- c_in $end
$var wire 1 j- c [3] $end
$var wire 1 k- c [2] $end
$var wire 1 l- c [1] $end
$var wire 1 b- c_out $end

$scope module carry_bit_0 $end
$var wire 1 :+ a $end
$var wire 1 J+ b $end
$var wire 1 c- c_in $end
$var wire 1 l- c_out $end
$var wire 1 >/ g $end
$var wire 1 ?/ p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 9+ a $end
$var wire 1 I+ b $end
$var wire 1 l- c_in $end
$var wire 1 k- c_out $end
$var wire 1 @/ g $end
$var wire 1 A/ p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 8+ a $end
$var wire 1 H+ b $end
$var wire 1 k- c_in $end
$var wire 1 j- c_out $end
$var wire 1 B/ g $end
$var wire 1 C/ p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 7+ a $end
$var wire 1 G+ b $end
$var wire 1 j- c_in $end
$var wire 1 b- c_out $end
$var wire 1 D/ g $end
$var wire 1 E/ p $end
$upscope $end
$upscope $end

$scope module iCLA_4B_2 $end
$var parameter 32 F/ N $end
$var wire 1 c+ sum [3] $end
$var wire 1 d+ sum [2] $end
$var wire 1 e+ sum [1] $end
$var wire 1 f+ sum [0] $end
$var wire 1 G/ c_out $end
$var wire 1 3+ a [3] $end
$var wire 1 4+ a [2] $end
$var wire 1 5+ a [1] $end
$var wire 1 6+ a [0] $end
$var wire 1 C+ b [3] $end
$var wire 1 D+ b [2] $end
$var wire 1 E+ b [1] $end
$var wire 1 F+ b [0] $end
$var wire 1 b- c_in $end
$var wire 1 H/ g [3] $end
$var wire 1 I/ g [2] $end
$var wire 1 J/ g [1] $end
$var wire 1 K/ g [0] $end
$var wire 1 L/ p [3] $end
$var wire 1 M/ p [2] $end
$var wire 1 N/ p [1] $end
$var wire 1 O/ p [0] $end
$var wire 1 P/ pc [3] $end
$var wire 1 Q/ pc [2] $end
$var wire 1 R/ pc [1] $end
$var wire 1 S/ pc [0] $end
$var wire 1 T/ c [3] $end
$var wire 1 U/ c [2] $end
$var wire 1 V/ c [1] $end
$var wire 1 W/ g_NOT [3] $end
$var wire 1 X/ g_NOT [2] $end
$var wire 1 Y/ g_NOT [1] $end
$var wire 1 Z/ g_NOT [0] $end
$var wire 1 [/ pc_NOT [3] $end
$var wire 1 \/ pc_NOT [2] $end
$var wire 1 ]/ pc_NOT [1] $end
$var wire 1 ^/ pc_NOT [0] $end
$var wire 1 _/ c_NOT [3] $end
$var wire 1 `/ c_NOT [2] $end
$var wire 1 a/ c_NOT [1] $end
$var wire 1 b/ c_NOT [0] $end

$scope module iFA0 $end
$var wire 1 f+ s $end
$var wire 1 c/ c_out $end
$var wire 1 6+ a $end
$var wire 1 F+ b $end
$var wire 1 b- c_in $end
$var wire 1 d/ xorAxB $end
$var wire 1 e/ nandAxB $end
$var wire 1 f/ andAxB $end
$var wire 1 g/ nandABxC $end
$var wire 1 h/ andABxC $end
$var wire 1 i/ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 d/ out $end
$var wire 1 6+ in1 $end
$var wire 1 F+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 e/ out $end
$var wire 1 6+ in1 $end
$var wire 1 F+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 f/ out $end
$var wire 1 e/ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 f+ out $end
$var wire 1 d/ in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 g/ out $end
$var wire 1 d/ in1 $end
$var wire 1 b- in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 h/ out $end
$var wire 1 g/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 i/ out $end
$var wire 1 h/ in1 $end
$var wire 1 f/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 c/ out $end
$var wire 1 i/ in1 $end
$upscope $end
$upscope $end

$scope module iFA1 $end
$var wire 1 e+ s $end
$var wire 1 j/ c_out $end
$var wire 1 5+ a $end
$var wire 1 E+ b $end
$var wire 1 V/ c_in $end
$var wire 1 k/ xorAxB $end
$var wire 1 l/ nandAxB $end
$var wire 1 m/ andAxB $end
$var wire 1 n/ nandABxC $end
$var wire 1 o/ andABxC $end
$var wire 1 p/ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 k/ out $end
$var wire 1 5+ in1 $end
$var wire 1 E+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 l/ out $end
$var wire 1 5+ in1 $end
$var wire 1 E+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 m/ out $end
$var wire 1 l/ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 e+ out $end
$var wire 1 k/ in1 $end
$var wire 1 V/ in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 n/ out $end
$var wire 1 k/ in1 $end
$var wire 1 V/ in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 o/ out $end
$var wire 1 n/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 p/ out $end
$var wire 1 o/ in1 $end
$var wire 1 m/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 j/ out $end
$var wire 1 p/ in1 $end
$upscope $end
$upscope $end

$scope module iFA2 $end
$var wire 1 d+ s $end
$var wire 1 q/ c_out $end
$var wire 1 4+ a $end
$var wire 1 D+ b $end
$var wire 1 U/ c_in $end
$var wire 1 r/ xorAxB $end
$var wire 1 s/ nandAxB $end
$var wire 1 t/ andAxB $end
$var wire 1 u/ nandABxC $end
$var wire 1 v/ andABxC $end
$var wire 1 w/ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 r/ out $end
$var wire 1 4+ in1 $end
$var wire 1 D+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 s/ out $end
$var wire 1 4+ in1 $end
$var wire 1 D+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 t/ out $end
$var wire 1 s/ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 d+ out $end
$var wire 1 r/ in1 $end
$var wire 1 U/ in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 u/ out $end
$var wire 1 r/ in1 $end
$var wire 1 U/ in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 v/ out $end
$var wire 1 u/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 w/ out $end
$var wire 1 v/ in1 $end
$var wire 1 t/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 q/ out $end
$var wire 1 w/ in1 $end
$upscope $end
$upscope $end

$scope module iFA3 $end
$var wire 1 c+ s $end
$var wire 1 x/ c_out $end
$var wire 1 3+ a $end
$var wire 1 C+ b $end
$var wire 1 T/ c_in $end
$var wire 1 y/ xorAxB $end
$var wire 1 z/ nandAxB $end
$var wire 1 {/ andAxB $end
$var wire 1 |/ nandABxC $end
$var wire 1 }/ andABxC $end
$var wire 1 ~/ c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 y/ out $end
$var wire 1 3+ in1 $end
$var wire 1 C+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 z/ out $end
$var wire 1 3+ in1 $end
$var wire 1 C+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 {/ out $end
$var wire 1 z/ in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 c+ out $end
$var wire 1 y/ in1 $end
$var wire 1 T/ in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 |/ out $end
$var wire 1 y/ in1 $end
$var wire 1 T/ in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 }/ out $end
$var wire 1 |/ in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 ~/ out $end
$var wire 1 }/ in1 $end
$var wire 1 {/ in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 x/ out $end
$var wire 1 ~/ in1 $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_0 $end
$var wire 1 3+ a [3] $end
$var wire 1 4+ a [2] $end
$var wire 1 5+ a [1] $end
$var wire 1 6+ a [0] $end
$var wire 1 C+ b [3] $end
$var wire 1 D+ b [2] $end
$var wire 1 E+ b [1] $end
$var wire 1 F+ b [0] $end
$var wire 1 b- c_in $end
$var wire 1 T/ c [3] $end
$var wire 1 U/ c [2] $end
$var wire 1 V/ c [1] $end
$var wire 1 G/ c_out $end

$scope module carry_bit_0 $end
$var wire 1 6+ a $end
$var wire 1 F+ b $end
$var wire 1 b- c_in $end
$var wire 1 V/ c_out $end
$var wire 1 !0 g $end
$var wire 1 "0 p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 5+ a $end
$var wire 1 E+ b $end
$var wire 1 V/ c_in $end
$var wire 1 U/ c_out $end
$var wire 1 #0 g $end
$var wire 1 $0 p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 4+ a $end
$var wire 1 D+ b $end
$var wire 1 U/ c_in $end
$var wire 1 T/ c_out $end
$var wire 1 %0 g $end
$var wire 1 &0 p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 3+ a $end
$var wire 1 C+ b $end
$var wire 1 T/ c_in $end
$var wire 1 G/ c_out $end
$var wire 1 '0 g $end
$var wire 1 (0 p $end
$upscope $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_2 $end
$var wire 1 3+ a [3] $end
$var wire 1 4+ a [2] $end
$var wire 1 5+ a [1] $end
$var wire 1 6+ a [0] $end
$var wire 1 C+ b [3] $end
$var wire 1 D+ b [2] $end
$var wire 1 E+ b [1] $end
$var wire 1 F+ b [0] $end
$var wire 1 b- c_in $end
$var wire 1 g- c [3] $end
$var wire 1 h- c [2] $end
$var wire 1 i- c [1] $end
$var wire 1 a- c_out $end

$scope module carry_bit_0 $end
$var wire 1 6+ a $end
$var wire 1 F+ b $end
$var wire 1 b- c_in $end
$var wire 1 i- c_out $end
$var wire 1 )0 g $end
$var wire 1 *0 p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 5+ a $end
$var wire 1 E+ b $end
$var wire 1 i- c_in $end
$var wire 1 h- c_out $end
$var wire 1 +0 g $end
$var wire 1 ,0 p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 4+ a $end
$var wire 1 D+ b $end
$var wire 1 h- c_in $end
$var wire 1 g- c_out $end
$var wire 1 -0 g $end
$var wire 1 .0 p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 3+ a $end
$var wire 1 C+ b $end
$var wire 1 g- c_in $end
$var wire 1 a- c_out $end
$var wire 1 /0 g $end
$var wire 1 00 p $end
$upscope $end
$upscope $end

$scope module iCLA_4B_3 $end
$var parameter 32 10 N $end
$var wire 1 _+ sum [3] $end
$var wire 1 `+ sum [2] $end
$var wire 1 a+ sum [1] $end
$var wire 1 b+ sum [0] $end
$var wire 1 20 c_out $end
$var wire 1 /+ a [3] $end
$var wire 1 0+ a [2] $end
$var wire 1 1+ a [1] $end
$var wire 1 2+ a [0] $end
$var wire 1 ?+ b [3] $end
$var wire 1 @+ b [2] $end
$var wire 1 A+ b [1] $end
$var wire 1 B+ b [0] $end
$var wire 1 a- c_in $end
$var wire 1 30 g [3] $end
$var wire 1 40 g [2] $end
$var wire 1 50 g [1] $end
$var wire 1 60 g [0] $end
$var wire 1 70 p [3] $end
$var wire 1 80 p [2] $end
$var wire 1 90 p [1] $end
$var wire 1 :0 p [0] $end
$var wire 1 ;0 pc [3] $end
$var wire 1 <0 pc [2] $end
$var wire 1 =0 pc [1] $end
$var wire 1 >0 pc [0] $end
$var wire 1 ?0 c [3] $end
$var wire 1 @0 c [2] $end
$var wire 1 A0 c [1] $end
$var wire 1 B0 g_NOT [3] $end
$var wire 1 C0 g_NOT [2] $end
$var wire 1 D0 g_NOT [1] $end
$var wire 1 E0 g_NOT [0] $end
$var wire 1 F0 pc_NOT [3] $end
$var wire 1 G0 pc_NOT [2] $end
$var wire 1 H0 pc_NOT [1] $end
$var wire 1 I0 pc_NOT [0] $end
$var wire 1 J0 c_NOT [3] $end
$var wire 1 K0 c_NOT [2] $end
$var wire 1 L0 c_NOT [1] $end
$var wire 1 M0 c_NOT [0] $end

$scope module iFA0 $end
$var wire 1 b+ s $end
$var wire 1 N0 c_out $end
$var wire 1 2+ a $end
$var wire 1 B+ b $end
$var wire 1 a- c_in $end
$var wire 1 O0 xorAxB $end
$var wire 1 P0 nandAxB $end
$var wire 1 Q0 andAxB $end
$var wire 1 R0 nandABxC $end
$var wire 1 S0 andABxC $end
$var wire 1 T0 c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 O0 out $end
$var wire 1 2+ in1 $end
$var wire 1 B+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 P0 out $end
$var wire 1 2+ in1 $end
$var wire 1 B+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 Q0 out $end
$var wire 1 P0 in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 b+ out $end
$var wire 1 O0 in1 $end
$var wire 1 a- in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 R0 out $end
$var wire 1 O0 in1 $end
$var wire 1 a- in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 S0 out $end
$var wire 1 R0 in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 T0 out $end
$var wire 1 S0 in1 $end
$var wire 1 Q0 in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 N0 out $end
$var wire 1 T0 in1 $end
$upscope $end
$upscope $end

$scope module iFA1 $end
$var wire 1 a+ s $end
$var wire 1 U0 c_out $end
$var wire 1 1+ a $end
$var wire 1 A+ b $end
$var wire 1 A0 c_in $end
$var wire 1 V0 xorAxB $end
$var wire 1 W0 nandAxB $end
$var wire 1 X0 andAxB $end
$var wire 1 Y0 nandABxC $end
$var wire 1 Z0 andABxC $end
$var wire 1 [0 c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 V0 out $end
$var wire 1 1+ in1 $end
$var wire 1 A+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 W0 out $end
$var wire 1 1+ in1 $end
$var wire 1 A+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 X0 out $end
$var wire 1 W0 in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 a+ out $end
$var wire 1 V0 in1 $end
$var wire 1 A0 in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 Y0 out $end
$var wire 1 V0 in1 $end
$var wire 1 A0 in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 Z0 out $end
$var wire 1 Y0 in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 [0 out $end
$var wire 1 Z0 in1 $end
$var wire 1 X0 in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 U0 out $end
$var wire 1 [0 in1 $end
$upscope $end
$upscope $end

$scope module iFA2 $end
$var wire 1 `+ s $end
$var wire 1 \0 c_out $end
$var wire 1 0+ a $end
$var wire 1 @+ b $end
$var wire 1 @0 c_in $end
$var wire 1 ]0 xorAxB $end
$var wire 1 ^0 nandAxB $end
$var wire 1 _0 andAxB $end
$var wire 1 `0 nandABxC $end
$var wire 1 a0 andABxC $end
$var wire 1 b0 c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 ]0 out $end
$var wire 1 0+ in1 $end
$var wire 1 @+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 ^0 out $end
$var wire 1 0+ in1 $end
$var wire 1 @+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 _0 out $end
$var wire 1 ^0 in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 `+ out $end
$var wire 1 ]0 in1 $end
$var wire 1 @0 in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 `0 out $end
$var wire 1 ]0 in1 $end
$var wire 1 @0 in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 a0 out $end
$var wire 1 `0 in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 b0 out $end
$var wire 1 a0 in1 $end
$var wire 1 _0 in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 \0 out $end
$var wire 1 b0 in1 $end
$upscope $end
$upscope $end

$scope module iFA3 $end
$var wire 1 _+ s $end
$var wire 1 c0 c_out $end
$var wire 1 /+ a $end
$var wire 1 ?+ b $end
$var wire 1 ?0 c_in $end
$var wire 1 d0 xorAxB $end
$var wire 1 e0 nandAxB $end
$var wire 1 f0 andAxB $end
$var wire 1 g0 nandABxC $end
$var wire 1 h0 andABxC $end
$var wire 1 i0 c_out_NOT $end

$scope module iXOR2_1 $end
$var wire 1 d0 out $end
$var wire 1 /+ in1 $end
$var wire 1 ?+ in2 $end
$upscope $end

$scope module iNAND2_1 $end
$var wire 1 e0 out $end
$var wire 1 /+ in1 $end
$var wire 1 ?+ in2 $end
$upscope $end

$scope module iNOT1_1 $end
$var wire 1 f0 out $end
$var wire 1 e0 in1 $end
$upscope $end

$scope module iXOR2_2 $end
$var wire 1 _+ out $end
$var wire 1 d0 in1 $end
$var wire 1 ?0 in2 $end
$upscope $end

$scope module iNAND2_2 $end
$var wire 1 g0 out $end
$var wire 1 d0 in1 $end
$var wire 1 ?0 in2 $end
$upscope $end

$scope module iNOT1_2 $end
$var wire 1 h0 out $end
$var wire 1 g0 in1 $end
$upscope $end

$scope module iNOR1_1 $end
$var wire 1 i0 out $end
$var wire 1 h0 in1 $end
$var wire 1 f0 in2 $end
$upscope $end

$scope module iNOT1_3 $end
$var wire 1 c0 out $end
$var wire 1 i0 in1 $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_0 $end
$var wire 1 /+ a [3] $end
$var wire 1 0+ a [2] $end
$var wire 1 1+ a [1] $end
$var wire 1 2+ a [0] $end
$var wire 1 ?+ b [3] $end
$var wire 1 @+ b [2] $end
$var wire 1 A+ b [1] $end
$var wire 1 B+ b [0] $end
$var wire 1 a- c_in $end
$var wire 1 ?0 c [3] $end
$var wire 1 @0 c [2] $end
$var wire 1 A0 c [1] $end
$var wire 1 20 c_out $end

$scope module carry_bit_0 $end
$var wire 1 2+ a $end
$var wire 1 B+ b $end
$var wire 1 a- c_in $end
$var wire 1 A0 c_out $end
$var wire 1 j0 g $end
$var wire 1 k0 p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 1+ a $end
$var wire 1 A+ b $end
$var wire 1 A0 c_in $end
$var wire 1 @0 c_out $end
$var wire 1 l0 g $end
$var wire 1 m0 p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 0+ a $end
$var wire 1 @+ b $end
$var wire 1 @0 c_in $end
$var wire 1 ?0 c_out $end
$var wire 1 n0 g $end
$var wire 1 o0 p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 /+ a $end
$var wire 1 ?+ b $end
$var wire 1 ?0 c_in $end
$var wire 1 20 c_out $end
$var wire 1 p0 g $end
$var wire 1 q0 p $end
$upscope $end
$upscope $end
$upscope $end

$scope module iCARRY_4b_3 $end
$var wire 1 /+ a [3] $end
$var wire 1 0+ a [2] $end
$var wire 1 1+ a [1] $end
$var wire 1 2+ a [0] $end
$var wire 1 ?+ b [3] $end
$var wire 1 @+ b [2] $end
$var wire 1 A+ b [1] $end
$var wire 1 B+ b [0] $end
$var wire 1 a- c_in $end
$var wire 1 d- c [3] $end
$var wire 1 e- c [2] $end
$var wire 1 f- c [1] $end
$var wire 1 F" c_out $end

$scope module carry_bit_0 $end
$var wire 1 2+ a $end
$var wire 1 B+ b $end
$var wire 1 a- c_in $end
$var wire 1 f- c_out $end
$var wire 1 r0 g $end
$var wire 1 s0 p $end
$upscope $end

$scope module carry_bit_1 $end
$var wire 1 1+ a $end
$var wire 1 A+ b $end
$var wire 1 f- c_in $end
$var wire 1 e- c_out $end
$var wire 1 t0 g $end
$var wire 1 u0 p $end
$upscope $end

$scope module carry_bit_2 $end
$var wire 1 0+ a $end
$var wire 1 @+ b $end
$var wire 1 e- c_in $end
$var wire 1 d- c_out $end
$var wire 1 v0 g $end
$var wire 1 w0 p $end
$upscope $end

$scope module carry_bit_3 $end
$var wire 1 /+ a $end
$var wire 1 ?+ b $end
$var wire 1 d- c_in $end
$var wire 1 F" c_out $end
$var wire 1 x0 g $end
$var wire 1 y0 p $end
$upscope $end
$upscope $end
$upscope $end

$scope module iOVERFLOW $end
$var wire 1 /+ A [15] $end
$var wire 1 0+ A [14] $end
$var wire 1 1+ A [13] $end
$var wire 1 2+ A [12] $end
$var wire 1 3+ A [11] $end
$var wire 1 4+ A [10] $end
$var wire 1 5+ A [9] $end
$var wire 1 6+ A [8] $end
$var wire 1 7+ A [7] $end
$var wire 1 8+ A [6] $end
$var wire 1 9+ A [5] $end
$var wire 1 :+ A [4] $end
$var wire 1 ;+ A [3] $end
$var wire 1 <+ A [2] $end
$var wire 1 =+ A [1] $end
$var wire 1 >+ A [0] $end
$var wire 1 ?+ B [15] $end
$var wire 1 @+ B [14] $end
$var wire 1 A+ B [13] $end
$var wire 1 B+ B [12] $end
$var wire 1 C+ B [11] $end
$var wire 1 D+ B [10] $end
$var wire 1 E+ B [9] $end
$var wire 1 F+ B [8] $end
$var wire 1 G+ B [7] $end
$var wire 1 H+ B [6] $end
$var wire 1 I+ B [5] $end
$var wire 1 J+ B [4] $end
$var wire 1 K+ B [3] $end
$var wire 1 L+ B [2] $end
$var wire 1 M+ B [1] $end
$var wire 1 N+ B [0] $end
$var wire 1 _+ sum [15] $end
$var wire 1 `+ sum [14] $end
$var wire 1 a+ sum [13] $end
$var wire 1 b+ sum [12] $end
$var wire 1 c+ sum [11] $end
$var wire 1 d+ sum [10] $end
$var wire 1 e+ sum [9] $end
$var wire 1 f+ sum [8] $end
$var wire 1 g+ sum [7] $end
$var wire 1 h+ sum [6] $end
$var wire 1 i+ sum [5] $end
$var wire 1 j+ sum [4] $end
$var wire 1 k+ sum [3] $end
$var wire 1 l+ sum [2] $end
$var wire 1 m+ sum [1] $end
$var wire 1 n+ sum [0] $end
$var wire 1 F" carry_out $end
$var wire 1 y! Oper [2] $end
$var wire 1 z! Oper [1] $end
$var wire 1 {! Oper [0] $end
$var wire 1 6, sign $end
$var wire 1 7, of $end
$var wire 1 z0 signed_overflow $end
$var wire 1 {0 unsigned_overflow $end
$upscope $end
$upscope $end
$upscope $end

$scope module memory0 $end
$var wire 1 G" aluResult [15] $end
$var wire 1 H" aluResult [14] $end
$var wire 1 I" aluResult [13] $end
$var wire 1 J" aluResult [12] $end
$var wire 1 K" aluResult [11] $end
$var wire 1 L" aluResult [10] $end
$var wire 1 M" aluResult [9] $end
$var wire 1 N" aluResult [8] $end
$var wire 1 O" aluResult [7] $end
$var wire 1 P" aluResult [6] $end
$var wire 1 Q" aluResult [5] $end
$var wire 1 R" aluResult [4] $end
$var wire 1 S" aluResult [3] $end
$var wire 1 T" aluResult [2] $end
$var wire 1 U" aluResult [1] $end
$var wire 1 V" aluResult [0] $end
$var wire 1 W! writeData [15] $end
$var wire 1 X! writeData [14] $end
$var wire 1 Y! writeData [13] $end
$var wire 1 Z! writeData [12] $end
$var wire 1 [! writeData [11] $end
$var wire 1 \! writeData [10] $end
$var wire 1 ]! writeData [9] $end
$var wire 1 ^! writeData [8] $end
$var wire 1 _! writeData [7] $end
$var wire 1 `! writeData [6] $end
$var wire 1 a! writeData [5] $end
$var wire 1 b! writeData [4] $end
$var wire 1 c! writeData [3] $end
$var wire 1 d! writeData [2] $end
$var wire 1 e! writeData [1] $end
$var wire 1 f! writeData [0] $end
$var wire 1 4" memWrite $end
$var wire 1 |0 memRead $end
$var wire 1 2" memReadorWrite $end
$var wire 1 ." halt $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var wire 1 W" readData [15] $end
$var wire 1 X" readData [14] $end
$var wire 1 Y" readData [13] $end
$var wire 1 Z" readData [12] $end
$var wire 1 [" readData [11] $end
$var wire 1 \" readData [10] $end
$var wire 1 ]" readData [9] $end
$var wire 1 ^" readData [8] $end
$var wire 1 _" readData [7] $end
$var wire 1 `" readData [6] $end
$var wire 1 a" readData [5] $end
$var wire 1 b" readData [4] $end
$var wire 1 c" readData [3] $end
$var wire 1 d" readData [2] $end
$var wire 1 e" readData [1] $end
$var wire 1 f" readData [0] $end
$var wire 1 }0 enable $end

$scope module iMEMORY $end
$var wire 1 W" data_out [15] $end
$var wire 1 X" data_out [14] $end
$var wire 1 Y" data_out [13] $end
$var wire 1 Z" data_out [12] $end
$var wire 1 [" data_out [11] $end
$var wire 1 \" data_out [10] $end
$var wire 1 ]" data_out [9] $end
$var wire 1 ^" data_out [8] $end
$var wire 1 _" data_out [7] $end
$var wire 1 `" data_out [6] $end
$var wire 1 a" data_out [5] $end
$var wire 1 b" data_out [4] $end
$var wire 1 c" data_out [3] $end
$var wire 1 d" data_out [2] $end
$var wire 1 e" data_out [1] $end
$var wire 1 f" data_out [0] $end
$var wire 1 W! data_in [15] $end
$var wire 1 X! data_in [14] $end
$var wire 1 Y! data_in [13] $end
$var wire 1 Z! data_in [12] $end
$var wire 1 [! data_in [11] $end
$var wire 1 \! data_in [10] $end
$var wire 1 ]! data_in [9] $end
$var wire 1 ^! data_in [8] $end
$var wire 1 _! data_in [7] $end
$var wire 1 `! data_in [6] $end
$var wire 1 a! data_in [5] $end
$var wire 1 b! data_in [4] $end
$var wire 1 c! data_in [3] $end
$var wire 1 d! data_in [2] $end
$var wire 1 e! data_in [1] $end
$var wire 1 f! data_in [0] $end
$var wire 1 G" addr [15] $end
$var wire 1 H" addr [14] $end
$var wire 1 I" addr [13] $end
$var wire 1 J" addr [12] $end
$var wire 1 K" addr [11] $end
$var wire 1 L" addr [10] $end
$var wire 1 M" addr [9] $end
$var wire 1 N" addr [8] $end
$var wire 1 O" addr [7] $end
$var wire 1 P" addr [6] $end
$var wire 1 Q" addr [5] $end
$var wire 1 R" addr [4] $end
$var wire 1 S" addr [3] $end
$var wire 1 T" addr [2] $end
$var wire 1 U" addr [1] $end
$var wire 1 V" addr [0] $end
$var wire 1 }0 enable $end
$var wire 1 f! wr $end
$var wire 1 ." createdump $end
$var wire 1 :" clk $end
$var wire 1 } rst $end
$var reg 1 ~0 loaded $end
$var reg 17 !1 largest [16:0] $end
$var integer 32 "1 mcd $end
$var integer 32 #1 i $end
$upscope $end
$upscope $end

$scope module iWRITEBACK0 $end
$var wire 1 W" readData [15] $end
$var wire 1 X" readData [14] $end
$var wire 1 Y" readData [13] $end
$var wire 1 Z" readData [12] $end
$var wire 1 [" readData [11] $end
$var wire 1 \" readData [10] $end
$var wire 1 ]" readData [9] $end
$var wire 1 ^" readData [8] $end
$var wire 1 _" readData [7] $end
$var wire 1 `" readData [6] $end
$var wire 1 a" readData [5] $end
$var wire 1 b" readData [4] $end
$var wire 1 c" readData [3] $end
$var wire 1 d" readData [2] $end
$var wire 1 e" readData [1] $end
$var wire 1 f" readData [0] $end
$var wire 1 G" addr [15] $end
$var wire 1 H" addr [14] $end
$var wire 1 I" addr [13] $end
$var wire 1 J" addr [12] $end
$var wire 1 K" addr [11] $end
$var wire 1 L" addr [10] $end
$var wire 1 M" addr [9] $end
$var wire 1 N" addr [8] $end
$var wire 1 O" addr [7] $end
$var wire 1 P" addr [6] $end
$var wire 1 Q" addr [5] $end
$var wire 1 R" addr [4] $end
$var wire 1 S" addr [3] $end
$var wire 1 T" addr [2] $end
$var wire 1 U" addr [1] $end
$var wire 1 V" addr [0] $end
$var wire 1 |! nextPC [15] $end
$var wire 1 }! nextPC [14] $end
$var wire 1 ~! nextPC [13] $end
$var wire 1 !" nextPC [12] $end
$var wire 1 "" nextPC [11] $end
$var wire 1 #" nextPC [10] $end
$var wire 1 $" nextPC [9] $end
$var wire 1 %" nextPC [8] $end
$var wire 1 &" nextPC [7] $end
$var wire 1 '" nextPC [6] $end
$var wire 1 (" nextPC [5] $end
$var wire 1 )" nextPC [4] $end
$var wire 1 *" nextPC [3] $end
$var wire 1 +" nextPC [2] $end
$var wire 1 ," nextPC [1] $end
$var wire 1 -" nextPC [0] $end
$var wire 1 3" memToReg $end
$var wire 1 0" link $end
$var wire 1 7! writeData [15] $end
$var wire 1 8! writeData [14] $end
$var wire 1 9! writeData [13] $end
$var wire 1 :! writeData [12] $end
$var wire 1 ;! writeData [11] $end
$var wire 1 <! writeData [10] $end
$var wire 1 =! writeData [9] $end
$var wire 1 >! writeData [8] $end
$var wire 1 ?! writeData [7] $end
$var wire 1 @! writeData [6] $end
$var wire 1 A! writeData [5] $end
$var wire 1 B! writeData [4] $end
$var wire 1 C! writeData [3] $end
$var wire 1 D! writeData [2] $end
$var wire 1 E! writeData [1] $end
$var wire 1 F! writeData [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1~
1!!
x#!
0"$
b0 #$
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
xu(
xt(
xs(
xV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
0~0
b0 !1
b10000 F$
b10000 q%
b10000 E&
b10000 w&
b10000 K'
b10000 }'
b10000 Q(
b10000 %)
b10000 W)
b10000 -+
b100 .+
b10000 9,
b100 :,
b10 ;,
b10000 `-
b100 p-
b100 [.
b100 F/
b100 10
b0 x
b10 y
b100 z
b1 "!
bx $$
b10000000000000000 %$
bx "1
b10000000000000000 #1
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
0A
0D
0C
0B
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
0U
zV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
1w
1{
x|
1}
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
06!
05!
04!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
1g!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
1{!
0z!
1y!
1x!
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
1."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
18"
09"
0:"
0="
0<"
0;"
0?"
0>"
1B"
0A"
0@"
xC"
xD"
zE"
0F"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
0g"
0h"
0i"
0j"
0z"
xy"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0,#
1+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
xL#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0\#
1[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0l#
1k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
x&$
x'$
x($
x)$
x*$
x+$
x,$
x-$
x.$
x/$
x0$
x1$
x2$
x3$
x4$
x5$
x6$
x7$
x8$
x9$
x:$
x;$
x<$
x=$
x>$
x?$
x@$
xA$
xB$
xC$
xD$
xE$
xG$
xH$
xI$
xJ$
xK$
xL$
xM$
xN$
xO$
xP$
xQ$
xR$
xS$
xT$
xU$
xV$
xW$
xX$
xY$
xZ$
x[$
x\$
x]$
x^$
x_$
x`$
xa$
xb$
xc$
xd$
xe$
xf$
xg$
xh$
xi$
xj$
xk$
xl$
xm$
xn$
xo$
xp$
xq$
xr$
xs$
xt$
xu$
xv$
xw$
xx$
xy$
xz$
x{$
x|$
x}$
x~$
x!%
x"%
x#%
x$%
x%%
x&%
x'%
x(%
x)%
x*%
x+%
x,%
x-%
x.%
x/%
x0%
x1%
x2%
x3%
x4%
x5%
x6%
x7%
x8%
x9%
x:%
x;%
x<%
x=%
x>%
x?%
x@%
xA%
xB%
xC%
xD%
xE%
xF%
xG%
xH%
xI%
xJ%
xK%
xL%
xM%
xN%
xO%
xP%
xQ%
xR%
xS%
xT%
xU%
xV%
xW%
xX%
xY%
xZ%
x[%
x\%
x]%
x^%
x_%
x`%
xa%
xb%
xc%
xd%
xe%
xf%
xg%
xh%
1i%
0j%
0k%
0l%
0m%
0n%
0o%
0p%
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xr(
xq(
xp(
xo(
xn(
xm(
xl(
xk(
xj(
xi(
xh(
xg(
xf(
xe(
xd(
xc(
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
x))
x()
x')
xF)
xE)
xD)
xC)
xB)
xA)
x@)
x?)
x>)
x=)
x<)
x;)
x:)
x9)
x8)
x7)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0J*
0I*
0H*
0G*
0F*
0E*
0D*
0C*
0B*
0A*
0@*
0?*
0>*
0=*
0<*
0;*
0Z*
0Y*
0X*
0W*
0V*
0U*
0T*
0S*
0R*
0Q*
0P*
0O*
0N*
0M*
0L*
0K*
0j*
0i*
0h*
0g*
0f*
0e*
0d*
0c*
0b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
x,+
x++
x*+
x)+
x(+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xW+
xV+
xU+
xT+
xS+
xR+
xQ+
xP+
xO+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
xp+
xo+
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
04,
03,
02,
01,
05,
16,
xK,
xJ,
xI,
xH,
xG,
xF,
xE,
xD,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
xM,
xL,
xl,
xk,
xj,
xi,
xh,
xg,
xf,
xe,
xd,
xc,
xb,
xa,
x`,
x_,
x^,
x],
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
x.-
x--
x,-
x+-
x*-
x)-
x(-
x'-
x&-
x%-
x$-
x#-
x"-
x!-
x~,
x},
x?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
x5-
x4-
x3-
x2-
x1-
x0-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x_-
x^-
x]-
x\-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
0c-
0b-
0a-
0o-
0n-
0m-
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
zu-
zt-
zs-
zr-
zy-
zx-
zw-
zv-
z}-
z|-
z{-
zz-
0".
0!.
0~-
z&.
z%.
z$.
z#.
z*.
z).
z(.
z'.
z..
z-.
z,.
z+.
x0.
11.
02.
13.
04.
15.
x7.
18.
09.
1:.
0;.
1<.
x>.
1?.
0@.
1A.
0B.
1C.
xE.
1F.
0G.
1H.
0I.
1J.
0K.
xL.
0M.
xN.
0O.
xP.
0Q.
xR.
0S.
xT.
0U.
xV.
0W.
xX.
0Y.
xZ.
z`.
z_.
z^.
z].
zd.
zc.
zb.
za.
zh.
zg.
zf.
ze.
0k.
0j.
0i.
zo.
zn.
zm.
zl.
zs.
zr.
zq.
zp.
zw.
zv.
zu.
zt.
xy.
1z.
0{.
1|.
0}.
1~.
x"/
1#/
0$/
1%/
0&/
1'/
x)/
1*/
0+/
1,/
0-/
1./
x0/
11/
02/
13/
04/
15/
06/
x7/
08/
x9/
0:/
x;/
0</
x=/
0>/
x?/
0@/
xA/
0B/
xC/
0D/
xE/
zK/
zJ/
zI/
zH/
zO/
zN/
zM/
zL/
zS/
zR/
zQ/
zP/
0V/
0U/
0T/
zZ/
zY/
zX/
zW/
z^/
z]/
z\/
z[/
zb/
za/
z`/
z_/
xd/
1e/
0f/
1g/
0h/
1i/
xk/
1l/
0m/
1n/
0o/
1p/
xr/
1s/
0t/
1u/
0v/
1w/
xy/
1z/
0{/
1|/
0}/
1~/
0!0
x"0
0#0
x$0
0%0
x&0
0'0
x(0
0)0
x*0
0+0
x,0
0-0
x.0
0/0
x00
z60
z50
z40
z30
z:0
z90
z80
z70
z>0
z=0
z<0
z;0
0A0
0@0
0?0
zE0
zD0
zC0
zB0
zI0
zH0
zG0
zF0
zM0
zL0
zK0
zJ0
xO0
1P0
0Q0
1R0
0S0
1T0
xV0
1W0
0X0
1Y0
0Z0
1[0
x]0
1^0
0_0
1`0
0a0
1b0
xd0
1e0
0f0
1g0
0h0
1i0
0j0
xk0
0l0
xm0
0n0
xo0
0p0
xq0
0r0
xs0
0t0
xu0
0v0
xw0
0x0
xy0
07,
0z0
0{0
x8,
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
x}0
z|0
0~#
1}#
z|#
z{#
zz#
zy#
zx#
zw#
zv#
zu#
zt#
zs#
zr#
zq#
zp#
zo#
zn#
zm#
z!$
0X)
0&)
0R(
0~'
0L'
0x&
0F&
0r%
0/-
0\,
0q-
0/.
06.
0=.
0D.
0\.
0x.
0!/
0(/
0//
0G/
0c/
0j/
0q/
0x/
020
0N0
0U0
0\0
0c0
$end
#50
0~
0{
#100
1~
1{
b10 "!
#150
0~
0{
#200
1~
1{
b11 "!
#201
0!!
0}
1,"
0+#
1*#
1/
0[#
1Z#
0y"
xx"
0k#
1j#
#250
0~
0{
#300
1~
1{
b100 "!
b1 x
